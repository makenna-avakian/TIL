{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TIL","text":"<p>Today I Learned</p> <p>A collection of small write ups on interesting topics. Inspired by @jbranchaud.</p> <p>Here I keep a running list of a documents on technologies and solutions to problems I have run into while being a dev. Always keep learning!</p>"},{"location":"general/","title":"Table of Contents","text":"<ul> <li>README</li> <li>index</li> <li>mardown</li> </ul>"},{"location":"mardown/","title":"Markdown in this Repo","text":"<p>Markdown open preview to see in real time </p> <p>mkdocks look at squid funk to make this into a cool static website. host on .io</p> <p>https://www.mkdocs.org/getting-started/</p>"},{"location":"Accessibility/accessibility-basics/","title":"Writing Accessible Code","text":"<p>Make your HTML code as semantic as possible.</p>"},{"location":"Accessibility/accessibility-basics/#use-semantic-html","title":"Use Semantic HTML","text":"<p>Purpose: Semantic HTML elements clearly describe their meaning in a human- and machine-readable way.</p> <p>Examples: Use <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;nav&gt;</code>, and <code>&lt;aside&gt;</code> to structure the content. Use <code>&lt;h1&gt;</code>to <code>&lt;h6&gt;</code> for headings to structure content logically.</p>"},{"location":"Accessibility/accessibility-basics/#alt-text-for-images","title":"Alt Text for Images","text":"<p>Purpose: Provides a textual alternative to non-text content in web pages.</p> <p>Example: <code>&lt;img src=\"logo.png\" alt=\"Company Logo\"&gt;</code> \u2014 The alt attribute explains the image content.</p>"},{"location":"Accessibility/accessibility-basics/#aria-accessible-rich-internet-applications-roles","title":"ARIA (Accessible Rich Internet Applications) Roles","text":"<p>Purpose: ARIA roles and attributes provide additional information about the role, state, and functionality of elements.</p> <p>Example: <code>aria-label</code>, <code>aria-hidden</code>, <code>aria-live</code> are commonly used.</p>"},{"location":"Accessibility/accessibility-basics/#keyboard-accessibility","title":"Keyboard Accessibility","text":"<p>Purpose: All functionalities should be accessible via a keyboard.</p> <p>Example: All interactive elements like links, buttons, and form controls are focusable using the tabindex attribute if necessary.</p>"},{"location":"Accessibility/accessibility-basics/#accessible-forms","title":"Accessible Forms","text":"<p>Purpose: Ensure forms are usable and understandable.</p> <p>Example: Use <code>&lt;label&gt;</code> for every input element. For example, <code>&lt;label for=\"name\"&gt;Name:&lt;/label&gt;&lt;input type=\"text\" id=\"name\"&gt;</code>. Group related form elements within <code>&lt;fieldset&gt;</code> elements and describe the group with <code>&lt;legend&gt;</code>.</p>"},{"location":"Accessibility/accessibility-basics/#use-of-correct-headings-and-labels","title":"Use of Correct Headings and Labels","text":"<p>Purpose: Headings and labels help in structuring content and describing functionality.</p> <p>Example: Use headings consistently to structure content; labels should clearly describe the purpose of the associated input field.</p>"},{"location":"Accessibility/accessibility-basics/#manage-focus-for-interactive-elements","title":"Manage Focus for Interactive Elements","text":"<p>Purpose: Focus management is crucial for users who rely on keyboards and assistive technologies. Can programatically set through <code>element.focus()</code>.</p> <p>Example: When a modal opens, move focus to the modal, and trap focus within until it\u2019s closed.</p>"},{"location":"Accessibility/accessibility-basics/#sufficient-color-contrast","title":"Sufficient Color Contrast","text":"<p>Purpose: Text should be readable against its background for those with visual impairments. Note that some color combinations techincally pass color contrast checkers but are deemed harder to read in actuality.</p> <p>Example: Use tools like the WebAIM Color Contrast Checker to ensure that text-background color combinations have enough contrast.</p>"},{"location":"Accessibility/accessibility-basics/#responsive-and-mobile-accessibility","title":"Responsive and Mobile Accessibility","text":"<p>Purpose: Content must be usable on all devices and screen sizes.</p> <p>Example: Use responsive web design practices, such as flexible grid layouts and media queries.</p>"},{"location":"Accessibility/general/","title":"Table of Contents","text":"<ul> <li>accessibility-basics</li> <li>screenreader</li> </ul>"},{"location":"Accessibility/screenreader/","title":"Coding for Screenreaders","text":""},{"location":"Accessibility/screenreader/#screen-reader-announcements","title":"Screen Reader Announcements","text":"<p>Changes in the state of UI components (like opening or closing of submenus) hould be announced properly:</p> <p><code>aria-live</code> Regions: Introduce sections of the page that are marked with <code>aria-live=\"polite\"</code> or <code>aria-live=\"assertive\"</code> for dynamic content changes, so that screen readers can announce these changes when they occur without disrupting the user's current activity.</p>"},{"location":"Accessibility/screenreader/#labeling-and-instructions","title":"Labeling and Instructions","text":"<p>Descriptive Labels:  All elements, especially interactive ones like buttons, should have clear and descriptive labels using <code>aria-label</code>.</p> <p>Instructions for  Navigation: Provide instructions at the beginning of the navigation section on how to interact with the menu, especially for complex interfaces.</p>"},{"location":"Accessibility/screenreader/#text-alternatives-for-visual-information","title":"Text Alternatives for Visual Information","text":"<p>Visual Cues as Text: If visual cues like colors or styles are used to indicate active or disabled states, these should be conveyed through text or screen reader-specific hints.</p>"},{"location":"Accessibility/screenreader/#logical-tab-order","title":"Logical Tab Order","text":"<p>Consistent Navigation: Users should be able to navigate through items in a predictable and consistent order, matching the visual structure of the component.</p>"},{"location":"Accessibility/screenreader/#skip-navigation-link","title":"Skip Navigation Link","text":"<p>Skip to Main Content: Provide a \"Skip to main content\" link at the top of the page that becomes visible when focused (done via keyboard navigation).</p>"},{"location":"Angular/aheadOfTime/","title":"Ahead of Time Compilation","text":"<p>Ahead of Time (AOT) compilation is the opposition of Just-in-Time (JIT) compilation (which compiles the application at runtime in the browser). AOT compilation processes the application during the build phase before it reaches the browser to enhance the user experience.</p>"},{"location":"Angular/aheadOfTime/#how-it-works","title":"How it works","text":"<ol> <li> <p>Angular HTML templates are compiled into JavaScript instructions that create the DOM elements directly, which eliminates the need for Angular to parse and understand template strings during runtime.</p> </li> <li> <p>TypeScript is compiled into JavaScript, like in JIT compilation, but it happens earlier in the build process.</p> </li> <li> <p>Tree shaking occurs during AOT so that unused JavaScript is removed. This helps in reducing the final size of application files.</p> </li> </ol>"},{"location":"Angular/aheadOfTime/#implementation","title":"Implementation","text":"<p>Enable AOT compilation in Angular by setting the <code>--aot</code> option with the Angular CLI build and serve commands:</p> <pre><code>ng build --aot\nng serve --aot\n</code></pre> <ul> <li>This will be the default for later versions on Angular.</li> </ul>"},{"location":"Angular/aheadOfTime/#benefits","title":"Benefits","text":"<p>Performance Improvement: AOT compiled applications load faster because the browser downloads pre-compiled version of the application. This eliminates the need to compile the application in the browser, reducing the application's bootstrapping time.</p> <p>Smaller Angular Framework Download Size: Because the application is compiled ahead of time, there is no need to download the Angular compiler. This reduces the application\u2019s overall size since the compiler is approximately half the size of Angular itself.</p> <p>Template Errors are Caught Earlier: AOT compiles HTML templates and checks your templates during the build phase, catching errors before they affect your users.</p> <p>Better Security: AOT compilation enables HTML templates and components to be compiled into JavaScript files before they are delivered to the client, making it much harder for others to inject harmful code.</p>"},{"location":"Angular/angularCLI/","title":"Guide to Angular's Command Line Interface","text":"<p>The Angular CLI is a command-line utility that helps you to initialize, develop, and maintain Angular applications.</p>"},{"location":"Angular/angularCLI/#setup","title":"Setup:","text":"<ol> <li>You will need to have Node.js and npm. To install Angular CLI, run: </li> </ol> <pre><code>npm install -g @angular/cli\n</code></pre> <ol> <li>Either CD to your Angular project or start a new one with:</li> </ol> <pre><code>ng new my-angular-app\n</code></pre>"},{"location":"Angular/angularCLI/#commands","title":"Commands:","text":"<ul> <li><code>ng generate component my-component</code>: Create a new component with all related files (TypeScript, HTML, CSS) and update the module declarations.</li> <li><code>ng serve</code>: Builds the application, starts the development server, watches for file changes, and reloads the application automatically in the browser.</li> <li><code>ng build --prod</code>: Performs ahead-of-time (AOT) compilation, optimization, and minification of the app's files for production deployment.</li> <li><code>ng test</code>: Run unit tests.</li> <li><code>ng lint</code>: Perform linting.</li> </ul>"},{"location":"Angular/angularComponents/","title":"Angular Components","text":"<p>Components are the building blocks of Angular applications. Much like in React, a component in Angular controls a section of the screen and is a combo of Typescript and HTML. The template defines the view, and the class defines the logic and data.</p>"},{"location":"Angular/angularComponents/#structure-of-an-angular-component","title":"Structure of an Angular Component","text":"<ol> <li>Template: An HTML template which declares what is rendered on the bade. It can bind data from the Typescript class to the component using Angular's binding syntax.</li> <li>Class: he TypeScript class associated with the template. It contains properties and methods needed by the view.</li> <li> <p>Metadata: Defined by decorators that attach to the class. The most common is the <code>@Component</code> decorator, which includes properties such as:</p> </li> <li> <p><code>selector</code>: Specifies a CSS selector for an HTML element that represents the component.</p> </li> <li><code>templateUrl</code>: Points to an external file that defines the view.</li> <li><code>styleUrls</code>: Points to one or more files that define the CSS styles for the view.</li> </ol>"},{"location":"Angular/angularComponents/#example","title":"Example","text":"<pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-hello-world',\n  templateUrl: './hello-world.component.html',\n  styleUrls: ['./hello-world.component.css']\n})\nexport class HelloWorldComponent {\n  title = 'Hello, World!';\n}\n</code></pre> <p>Corresponding HTML Template:</p> <pre><code>&lt;h1&gt;{{ title }}&lt;/h1&gt;\n</code></pre> <p>The component now can be used anywhere in the application by using its selector <code>&lt;app-hello-world&gt;&lt;/app-hello-world&gt;</code>.</p>"},{"location":"Angular/angularFeatures/","title":"Introduction to Angular","text":"<p>Angular, like React, is a front-end web development framework which is widely used for building single page applications.</p>"},{"location":"Angular/angularFeatures/#features","title":"Features","text":"<p>Two-Way Data Binding: Angular's two-way data binding automatically synchronizes the data between the model and view components. This feature simplifies the programming model and reduces the need for explicit DOM manipulation.</p> <p>TypeScript-based: Angular applications are built using TypeScript, a superset of JavaScript that includes type declarations. This allows for more maintainable code, advanced refactoring, and autocompletion tools, enhancing the development process.</p> <p>Component-based Architecture: Angular introduces a component-based architecture that ensures applications are modular. This makes them easier to develop, test, maintain, and scale.</p> <p>Directives: Angular provides powerful directives (custom HTML tags) that extend the functionality of HTML and allow you to create reusable components.</p> <p>Dependency Injection: The framework has a built-in dependency injection subsystem that helps in developing and testing applications more efficiently.</p> <p>RxJS: Angular extensively uses RxJS, a library for reactive programming using observables that makes it easier to compose asynchronous or callback-based code.</p> <p>Angular CLI: Angular Command Line Interface (CLI) tools automate tasks, making it easier to start, develop, scaffold, and maintain Angular applications.</p>"},{"location":"Angular/angularModules/","title":"Angular Modules","text":"<p>A NG module is defined by <code>@NgModule</code>. It takes a single metadata object whose properties describe the module. The most important properties are: 1. <code>declarations</code>: Components, directives, and pipes that belong to the module. 2. <code>imports</code>: Other modules whose exported classes are needed by component templates declared in this module. 3. <code>exports</code>: The subset of declarations that should be visible and usable in the component templates of other modules. 4. <code>providers</code>: Creators of services that this module contributes to the global collection of services; they become accessible in all parts of the app. 5. <code>bootstrap</code>: The main application view, called the root component, which hosts all other app views. Only the root NgModule should set the bootstrap property.</p>"},{"location":"Angular/angularModules/#example","title":"Example","text":"<pre><code>import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home.component';\nimport { UserService } from './user.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [\n    UserService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n</code></pre> <p>Here, <code>AppModule</code> is the root module that uses <code>BrowserModule</code>, declares <code>AppComponent</code> and <code>HomeComponent</code>, provides the <code>UserService</code>, and boots using the <code>AppComponent</code>.</p>"},{"location":"Angular/angularReactComparison/","title":"Comparison with React","text":""},{"location":"Angular/angularReactComparison/#architecture","title":"Architecture:","text":"<p>Angular: It is a Model-View-Controller framework that provides a strong opinionated structure for your applications. Angular includes a wide array of features such as form validation, routing, state management, and HTTP client libraries. React: React is not a full framework, it is more of a library focused only on building user interfaces, particularly through the view layer. It is less opinionated, giving developers the freedom to choose the additional libraries they need for routing, state management, etc. We use react to build micro-front ends with multi page applications.</p>"},{"location":"Angular/angularReactComparison/#development-language","title":"Development Language:","text":"<p>Angular: Angular applications are built using TypeScript. React: React can be used with JavaScript or TypeScript. Using TypeScript with React has become more common, but it is not required from the start.</p>"},{"location":"Angular/angularReactComparison/#data-binding","title":"Data Binding:","text":"<p>Angular: Angular uses two-way binding, which means that the Model and the View are linked so that changes in the Model automatically reflect in the View and vice versa, thus making it better for SPAs. React: React uses one-way data binding, where the flow of data is directed only from the Model to the View. It uses a unidirectional data flow which makes it easier to track changes over time, thus making it better for MPAs.</p>"},{"location":"Angular/angularReactComparison/#component-management","title":"Component Management:","text":"<p>Angular: Angular has a more rigid, complex structure for component management with its dependency injection framework. React: React\u2019s components are generally simpler and more lightweight. It promotes the use of functional components and hooks, which allow for reusing stateful logic between components without changing the component hierarchy.</p>"},{"location":"Angular/angularReactComparison/#performance","title":"Performance:","text":"<p>Angular: Angular's performance is generally good for most applications, but the framework size can be larger due to its comprehensive feature set. Multiple techniques like Ahead-of-Time (AOT) compilation, lazy loading, and tree shaking can be used to improve performance. React: React is known for its high performance, mainly due to the virtual DOM system that optimizes the re-rendering process. React can be more efficient in handling frequent UI updates.</p>"},{"location":"Angular/angularTemplates/","title":"Angular Templates","text":"<p>Angular templates are HTML views enhanced with Angular markup. They connect the application's data and logic to the DOM (Document Object Model).</p>"},{"location":"Angular/angularTemplates/#features-of-angular-templates","title":"Features of Angular Templates","text":"<ol> <li> <p>Interpolation: Uses double curly braces {{ }} to display component properties. Angular replaces these placeholders with the corresponding values during runtime, updating the DOM as these property values change.</p> </li> <li> <p>Property Binding: Allows properties of DOM elements to be set based on data values from the component. This is done using square brackets, <code>[src]=\"user.imageUrl\"</code>.</p> </li> <li> <p>Event Binding: Does the listening for and responding to user actions such as keystrokes, mouse movements, clicks, and touches. Event binding is done using parentheses, <code>(click)=\"handleClick()\"</code>.</p> </li> <li> <p>Two-Way Binding: Combines property and event binding in a single notation using [( )] syntax. It is used with forms, <code>[(ngModel)]=\"user.name\"</code>.</p> </li> <li> <p>Directives: Angular extends HTML with directives that add functionality to templates. They can be structural or attribute directives.</p> </li> <li> <p>Pipes: Transform displayed values within templates. Pipes are functions that accept an input value and return a transformed value. Common examples include date, uppercase, and lowercase.</p> </li> </ol>"},{"location":"Angular/angularTemplates/#example","title":"Example","text":"<pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-user-profile',\n  template: `\n    &lt;div&gt;\n      &lt;h1&gt;Welcome, {{ userName }}!&lt;/h1&gt;\n      &lt;img [src]=\"userImage\" alt=\"User image\"&gt;\n      &lt;button (click)=\"logout()\"&gt;Logout&lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  styleUrls: ['./user-profile.component.css']\n})\nexport class UserProfileComponent {\n  userName: string = 'Jane Doe';\n  userImage: string = 'path/to/image.jpg';\n\n  logout() {\n    console.log('User logged out');\n  }\n}\n</code></pre>"},{"location":"Angular/dataBinding/","title":"Angular Data Binding","text":"<p>Data binding allows communication between a component's class and its template. This communication enables the app to both display data and respond to user input in real time.</p>"},{"location":"Angular/dataBinding/#introduction-to-data-binding","title":"Introduction to Data Binding","text":"<p>Data binding in Angular helps in synchronizing data between the model (component class) and the view (template). There are three types of bindings based on the data flow:</p> <ol> <li>From the Component to the View</li> <li>From the View to the Component</li> <li>Two-Way Data Binding</li> </ol>"},{"location":"Angular/dataBinding/#types-of-data-binding","title":"Types of Data Binding","text":"<p>1. Interpolation and Property Binding (Component to View) - Interpolation: Uses <code>{{ value }}</code> syntax to insert values computed from component properties into the HTML:</p> <pre><code>&lt;h1&gt;{{ title }}&lt;/h1&gt;\n</code></pre> <p>This displays the value of the <code>title</code> property from the component.</p> <ul> <li>Property Binding: Uses <code>[property]=\"value\"</code> syntax to set properties of HTML elements:</li> </ul> <pre><code>&lt;img [src]=\"imageUrl\"&gt;\n</code></pre> <p>This binds the <code>src</code> attribute of an <code>&lt;img&gt;</code> tag to the <code>imageUrl</code> property in the component.</p> <p>2. Event Binding (View to Component) Event binding uses the <code>(event)=\"handler()\"</code> syntax to call component methods in response to events like clicks, form entries, and other user actions:</p> <pre><code>&lt;button (click)=\"save()\"&gt;Save&lt;/button&gt;\n</code></pre> <p>This calls the <code>save</code> method in the component when the button is clicked.</p> <p>3. Two-Way Data Binding Two-way data binding uses the <code>[(ngModel)]=\"property\"</code> syntax to achieve a two-way data flow between the component and the view. This is particularly useful for forms and other inputs:</p> <pre><code>&lt;input [(ngModel)]=\"name\"&gt;\n</code></pre> <p>This allows the input field to display the value of the <code>name</code> property, while also updating that property whenever the user modifies the input.</p>"},{"location":"Angular/dataBinding/#how-data-binding-works-in-angular","title":"How Data Binding Works in Angular","text":"<p>Angular processes data binding as follows:</p> <ul> <li>During template compilation, Angular converts the HTML template into JavaScript code. The binding syntax tells Angular how to connect both parts.</li> <li>Change detection: Angular automatically detects changes in data and DOM events. The framework updates the DOM when the underlying data changes.</li> </ul>"},{"location":"Angular/dataBinding/#best-practices-for-data-binding","title":"Best Practices for Data Binding","text":"<ul> <li>Use property binding for static or dynamic values: Static values never change, while dynamic values are properties on the component that Angular can update during runtime.</li> <li>Utilize event binding for user interactions: Any interaction from the user that should trigger a response should use event binding.</li> <li>Employ two-way data binding sparingly: Two-way data binding can lead to performance issues. It is best used for forms and components where the user interacts with data.</li> </ul>"},{"location":"Angular/general/","title":"Table of Contents","text":"<ul> <li>angularFeatures</li> <li>angularCLI</li> <li>angularModules</li> <li>angularReactComparison</li> <li>angularTemplates</li> <li>aheadOfTime</li> <li>angularComponents</li> <li>treeShaking</li> <li>dataBinding</li> <li>lazyLoading</li> </ul>"},{"location":"Angular/lazyLoading/","title":"Lazy Loading in Angular","text":"<p>Lazy Loading in an optimization technique in Angular which speeds up the inital startup time by splitting the app into several bundles and loading them on demand.</p>"},{"location":"Angular/lazyLoading/#how-it-works","title":"How it Works","text":"<p>Lazy loading is implemented by configuring the <code>RouterModule</code> to asynchronously load feature modules when they are required, rather than loading everything upfront. This is done by using the <code>loadChildren</code> method in the route configuration.</p>"},{"location":"Angular/lazyLoading/#example","title":"Example","text":"<pre><code>Copy code\nconst routes: Routes = [\n  {\n    path: 'feature',\n    loadChildren: () =&gt; import('./feature/feature.module').then(m =&gt; m.FeatureModule)\n  }\n];\n</code></pre> <p>In this configuration, FeatureModule is not loaded until the user navigates to the 'feature' path.</p>"},{"location":"Angular/lazyLoading/#benefits-of-lazy-loading","title":"Benefits of Lazy Loading","text":"<p>Faster Initial Load: By only loading the core app bundle initially, the time to interactive decreases, which is crucial for user retention. Bandwidth Conservation: Lazy loading ensures that users only download the parts of the application they use, saving bandwidth and potentially reducing costs on mobile networks. Improved User Experience: Users can interact with the initial content of the application faster, while other parts are loaded on demand, leading to a smoother experience.</p>"},{"location":"Angular/treeShaking/","title":"Tree Shaking in Angular","text":"<p>Tree shaking is an optimization technique where unused Typescript code is eliminated from the final application bundle to keep the application as lightweight as possible.</p>"},{"location":"Angular/treeShaking/#how-it-works","title":"How it works","text":"<p>Tree shaking analyzes the import and export statements in your JavaScript and TypeScript files. A modern build tool, like Webpack used by Angular CLI, determines if a piece of code is being used anywhere in your application. If a function, class, or variable is not used, it is excluded from the final bundle.</p>"},{"location":"Angular/treeShaking/#benefits-of-tree-shaking","title":"Benefits of Tree Shaking","text":"<p>Reduced Bundle Size: By removing unused code, the overall size of the application is reduced, leading to faster download and startup times. Improved Performance: Less JavaScript to parse and execute can significantly enhance the performance, especially on mobile devices with slower processors. Enhanced Maintainability: Less code means less complexity, making your application easier to maintain and debug.</p>"},{"location":"CSS/animations/","title":"CSS Animations","text":"<p>CSS animations add visual effects to HTML elements on a web page. They are widely used to create interactive and dynamic effects without using JavaScript/Typescript. </p>"},{"location":"CSS/animations/#css-keyframes-rule","title":"CSS @keyframes Rule","text":"<p>The foundation of css animations is the <code>@keyframes</code> rule, which specifies the animation's behavior. With <code>@keyframes</code>, you can define the state of the animation at various points using percentages. For example, 0% represents the start of the animation, and 100% represents the end, while 50% is the middle.</p> <pre><code>@keyframes example {\n    0% { background-color: red; }\n    50% { background-color: yellow; }\n    100% { background-color: green; }\n}\n</code></pre>"},{"location":"CSS/animations/#common-animation-properties","title":"Common Animation Properties","text":"<p><code>animation-name</code>: Specifies the name of the @keyframes animation.</p> <p><code>animation-duration</code>: Defines how long the animation should take to complete.</p> <p><code>animation-timing-function</code>: Controls the animation's speed curve (e.g., linear, ease-in, ease-out, ease-in-out).</p> <p><code>animation-delay</code>: Sets a delay before the animation starts.</p> <p><code>animation-iteration-count</code>: Determines how many times the animation should repeat.</p> <p><code>animation-direction</code>: Defines whether the animation should run forwards, backwards, or alternate between the two.</p> <p><code>animation-fill-mode</code>: Specifies a style when the animation is not playing (before it starts, after it ends, or both).</p> <p><code>animation-play-state</code>: Allows pausing and resuming the animation.</p>"},{"location":"CSS/animations/#typical-applications","title":"Typical Applications","text":"<p>Button Hover Effects create subtle hover effects for buttons. An example is changing the background color when the user hovers over it.</p> <p>Loading Spinners implement custom loading animations such as spinners or progress bars. These are used to make loading times feel more interactive and encourage the user to feel like things are happening.</p> <p>Attention Seekers draw attention to specific elements like notifications or buttons, using different effects.</p>"},{"location":"CSS/animations/#benefits-of-css-animations","title":"Benefits of CSS Animations","text":"<p>Performance: CSS animations are very performant.</p> <p>Control: CSS animations give you exact control over animation timing and behavior.</p> <p>Compatibility: CSS Animations are supported widely across modern web browsers without additional libraries.</p>"},{"location":"CSS/animations/#limitations-of-css-animations","title":"Limitations of CSS Animations","text":"<p>Complexity: More complex animations can become difficult to manage with pure CSS.</p> <p>Control: The download to control is that unlike JavaScript, real-time manipulation based on user input or other dynamic conditions is limited. However, it can be used with Javascript to great effect.</p>"},{"location":"CSS/general/","title":"Table of Contents","text":"<ul> <li>animations</li> </ul>"},{"location":"Design-Patterns/dependancyInjections/","title":"Dependency Injections","text":"<p>Dependency Injection (DI) is a design pattern used to implement IoC (Inversion of Control), allowing for better modularity and making the system easier to manage and scale. Using DI, objects receive their dependencies from an external source rather than creating them internally.</p> <p>DI achieves this by decoupling the creation of an object from its usage.</p>"},{"location":"Design-Patterns/dependancyInjections/#benefits-of-dependency-injection","title":"Benefits of Dependency Injection","text":"<p>Modularity: By decoupling dependencies, DI increases the modularity of the application.</p> <p>Testability: Components that do not manage their dependencies are easier to test in isolation because they can be easily replaced with mock objects.</p> <p>Maintainability: Reducing dependency coupling makes the system easier to understand and modify.</p> <p>Flexibility: Components can be replaced with alternative implementations without changing the components themselves.</p>"},{"location":"Design-Patterns/dependancyInjections/#examples","title":"Examples:","text":"<ol> <li>Constructor Injection, where dependencies are provided through the class constructor.</li> </ol> <pre><code>interface Logger {\n    log(message: string): void;\n}\n\nclass ConsoleLogger implements Logger {\n    log(message: string) {\n        console.log(message);\n    }\n}\n\nclass AppService {\n    constructor(private logger: Logger) {}\n\n    doWork() {\n        this.logger.log('Doing work');\n    }\n}\n\nconst logger = new ConsoleLogger();\nconst appService = new AppService(logger);\nappService.doWork();\n</code></pre> <ol> <li>Property Injection, where the property injection injects dependencies by setting a properties on the class.</li> </ol> <pre><code>class AppService {\n    private _logger: Logger;\n\n    set logger(logger: Logger) {\n        this._logger = logger;\n    }\n\n    doWork() {\n        this._logger.log('Doing work');\n    }\n}\n\nconst appService = new AppService();\nappService.logger = new ConsoleLogger();\nappService.doWork();\n</code></pre> <ul> <li> <p>Note this can expose public setters which can lead to dependencies being changed after initialization.</p> </li> <li> <p>Interface Injection, where the component is required to provide and injection method.</p> </li> </ul> <pre><code>interface LoggerInjector {\n    injectLogger(logger: Logger): void;\n}\n\nclass AppService implements LoggerInjector {\n    private logger: Logger;\n\n    injectLogger(logger: Logger): void {\n        this.logger = logger;\n    }\n\n    doWork() {\n        this.logger.log('Doing work');\n    }\n}\n\nconst appService = new AppService();\nappService.injectLogger(new ConsoleLogger());\nappService.doWork();\n</code></pre>"},{"location":"Design-Patterns/eventBus/","title":"Event Bus Pattern in Microservice Architecture","text":""},{"location":"Design-Patterns/eventBus/#what-is-the-event-bus-pattern","title":"What is the Event Bus Pattern?","text":"<p>The event bus pattern is a design pattern where a software component (the event bus) acts as an intermediary channel that handles events between different microservices. Since in a microservice architectures, each microservice operates independently, and the event bus helps these services communicate by transmitting events that they can subscribe to or publish.</p>"},{"location":"Design-Patterns/eventBus/#key-components","title":"Key Components","text":"<p>Event Producers: Microservices that generate events. Event Bus: The central system that routes events from producers to consumers. Event Consumers: Microservices that listen for and react to events.</p>"},{"location":"Design-Patterns/eventBus/#components","title":"Components","text":"<p>1. Decoupling: Microservices don't see the details of other services, which encances maintainability and scalability. 2. Asynchronous Communication: This is by nautre an asyncronous operation, which has the benefit of non-blocking operations and increased performance. 3. Fault Tolerance: The event bus can buffer events during high load or failures, providing a level of resilience.</p>"},{"location":"Design-Patterns/eventBus/#implementation-of-the-event-bus-pattern","title":"Implementation of the Event Bus Pattern","text":""},{"location":"Design-Patterns/eventBus/#1-event-definition-and-management","title":"1. Event Definition and Management","text":"<p>Define events that are published to the even bus. Every even should have a defined schema to prevent conflicts.</p>"},{"location":"Design-Patterns/eventBus/#2-service-integration","title":"2. Service Integration","text":"<p>Integrate microservices with the event bus by implementing event producers and consumers. </p> <p>Event Producers Event producers are services that publish events to the event bus. These events represent changes in state or data. Publishers do not care who is consuming their events.</p> <p>Event Consumers Event consumers are services that subscribe to events of interest on the event bus. Consumers have to susbscribe to events in order to process them.</p>"},{"location":"Design-Patterns/eventBus/#3-monitoring-and-management","title":"3. Monitoring and Management","text":"<p>Have monitoring to track the performance of the event bus and the services interacting with it.</p>"},{"location":"Design-Patterns/general/","title":"Table of Contents","text":"<ul> <li>eventBus</li> <li>dependancyInjections</li> <li>observerPattern</li> </ul>"},{"location":"Design-Patterns/observerPattern/","title":"Observer Pattern in Monolithic Architecture","text":""},{"location":"Design-Patterns/observerPattern/#what-is-the-observer-pattern","title":"What is the Observer Pattern?","text":"<p>The Observer pattern is a design pattern in monolithic architectures where a subject maintains a list of observers which get notified of any subject state changes, usually by calling a method. </p>"},{"location":"Design-Patterns/observerPattern/#components-of-the-observer-pattern","title":"Components of the Observer Pattern","text":"<p>Subject: Maintains a list of observers, facilitates adding or removing observers, and notifies them of events. Observers: Objects that wish to receive updates from the subject.</p>"},{"location":"Design-Patterns/observerPattern/#what-the-observer-pattern-does-for-monolithic-architecture","title":"What the Observer Pattern does for Monolithic Architecture","text":"<p>Since in a monolithic architecture each component of the program is interconnected, the observer pattern does a few things for it.</p> <p>Decoupling of Components: The Observer pattern helps in reducing dependencies amongst components. Components can remain independent of each other, while still being able to communicate through the defined events.</p> <p>Ease of Maintenance: Changes in the state of one component can be communicated to other dependent components without hard-wiring the components together, making the system easier to maintain.</p> <p>Scalability Within the Monolith: The oberver pattern allows for scalability in specific areas of the application. Although the application is a single codebase, internally it can scale parts that are under heavier loads by simply adding more observers to the crucial subjects.</p>"},{"location":"Git/ack/","title":"ack","text":"<p>Used for working on microservices or multiple repos. Looks up all files under the current directory. Can use regex with it.</p> <p>ack searchword: shows all of files that has matching word across repos. - ack --ts searchword: only search for .ts files (can seach for different file names) - ack --help: list of all helpful search patterns</p>"},{"location":"Git/alias/","title":"Git Alias","text":"<p>Used to make shortcuts for git commands.</p>"},{"location":"Git/alias/#getting-set-up","title":"Getting set up","text":"<p>Open your terminal and navigate to your root directory. (cd /) To create the shorthand file, run: <code>touch ~/.gitshorthand</code></p>"},{"location":"Git/alias/#editing-your-file","title":"Editing your file","text":"<p>You can edit your file in your terminal with: <code>nano ~/.gitshorthand</code></p> <p>(After making your changes in Nano, press Ctrl + O. This will prompt you to confirm the file name to save. Press Enter to confirm the file name, then, press Ctrl + X to exit Nano.)</p>"},{"location":"Git/alias/#adding-to-zshrc","title":"Adding to .zshrc","text":"<p>Open your ~/.zshrc file in a text editor. <code>nano ~/.zshrc</code></p> <p>At the end of your ~/.zshrc file, add the following line: <code>source ~/.gitshorthand</code></p> <p>Save the ~/.zshrc file and reload the file to apply the changes. You can run: <code>source ~/.zshrc</code></p>"},{"location":"Git/config-editor/","title":"Setting a specific text editor for VS Code","text":"<p>git config --global core.editor \"code --wait\"</p>"},{"location":"Git/conflicts/","title":"Conflicts","text":""},{"location":"Git/conflicts/#identify-conflicts","title":"Identify Conflicts","text":"<p>When you encounter a conflict, Git will notify you. Use the git status command to see which files have conflicts. Conflicting files will be marked as \"both modified\" in the status output.</p>"},{"location":"Git/conflicts/#open-conflicting-files","title":"Open Conflicting Files","text":"<p>Open the conflicting file(s) in your code editor. Git marks the conflicting sections within the file.</p>"},{"location":"Git/conflicts/#understand-conflict-markers","title":"Understand Conflict Markers","text":"<p>Git marks conflicts with special markers: &lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, and &gt;&gt;&gt;&gt;&gt;&gt;&gt;. Everything between &lt;&lt;&lt;&lt;&lt;&lt;&lt; and ======= represents changes from the current branch. Everything between ======= and &gt;&gt;&gt;&gt;&gt;&gt;&gt; represents changes from the incoming branch.</p>"},{"location":"Git/conflicts/#resolve-conflicts","title":"Resolve Conflicts","text":"<p>Manually edit the conflicting sections to resolve differences. Decide which changes to keep, modify, or discard. Delete the conflict markers (&lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;) once you've resolved the conflict.</p>"},{"location":"Git/conflicts/#add-and-commit-changes","title":"Add and Commit Changes","text":"<p>Use git add  to stage the resolved file(s) for commit. Once all conflicts are resolved, commit the changes using git commit. <p>For some Automatically generated files (like package-lock.json) it's always best to regenerate the file through npm install.</p>"},{"location":"Git/general/","title":"Table of Contents","text":"<ul> <li>alias</li> <li>useful-commands</li> <li>vimTerminal</li> <li>config-editor</li> <li>ack</li> <li>conflicts</li> </ul>"},{"location":"Git/useful-commands/","title":"Useful Git Commands:","text":"<p><code>git history</code>: To view a list of commands executed in the current Git session, you can use history. This command provides a chronological record of the commands you've run, helping you track your workflow.</p> <p><code>git log</code>: If you want to see a list of previous commits along with their commit messages, authors, and timestamps, use git log. This command provides a comprehensive overview of the commit history of your repository, aiding in understanding the evolution of the project.</p> <p><code>git status</code>: To check the status of your working directory and staging area, use git status. It allows you to see which files have been modified, staged for commit, or are untracked, helping you manage your changes effectively.</p>"},{"location":"Git/useful-commands/#git-commits","title":"Git Commits:","text":"<p><code>git add</code>: Use git add to add changes from your working directory to the staging area in preparation for committing.</p> <p><code>git stash</code>: If you want to temporarily shelve changes in your working directory without committing them, you can use git stash.</p> <p><code>git stash pop</code>: To retrieve the most recently stashed changes from the stash and apply them to your working directory, use git stash pop.</p> <p><code>git stash save example-name</code>: You can save the current state of your working directory, including staged changes, with a custom label using git stash save.</p> <p><code>git reset</code>: To undo changes in your working directory or staging area, you can use git reset. Be cautious as it modifies the repository's history.</p> <p><code>git commit -v -m \"commit message\"</code>: This command allows you to commit changes with a verbose diff displayed, aiding in reviewing the changes being committed.</p>"},{"location":"Git/useful-commands/#git-commit-messages","title":"Git Commit Messages:","text":"<p>Various commands can be used within the Git commit message editor: - :q to quit. - :w to write (save changes). - :qw to write and quit. - :q! to force quit without saving changes.</p> <p><code>git reset --soft HEAD~1</code>: Use this command to revert the last commit while preserving the changes in your working directory and staging area. It's less drastic than git reset with a commit hash, as it maintains the commit history.</p> <p><code>git commit --amend</code>: If you need to modify the last commit's message or include additional changes, you can use git commit --amend. This command combines staging changes and committing with the previous commit, effectively updating it.</p> <p><code>git diff</code>: To see the difference between the current state of your working directory and the staging area, use git diff. This command opens a Vim-like interface to display the changes.</p> <p><code>git add -p</code>: Use git add -p to selectively stage changes by interactively choosing which lines or chunks of code to add to the staging area.</p> <p><code>git reflog</code>: For a detailed history of reference updates in your repository, including commits, branches, merges, and resets, use git reflog. It provides a comprehensive log of all recent actions with corresponding hashes, aiding in navigating and recovering from mistakes.</p>"},{"location":"Git/vimTerminal/","title":"vimTerminal","text":""},{"location":"Git/vimTerminal/#vim-mode-in-terminal","title":"Vim mode in Terminal","text":"<p>In Unix-based systems, you can use the 'set -o vi' command to enable Vim mode in the terminal. This allows you to use Vim keybindings for command-line editing. </p> <p>To enable Vim mode in the terminal, run the following command:</p> <pre><code>nano ~/.zshrc\n</code></pre> <p>And add the following line to the file:</p> <pre><code>set -o vi\n</code></pre> <p>Once Vim mode is enabled, you can use the following keybindings:</p> <ul> <li><code>Esc</code>: Switch to command mode from input mode.</li> <li><code>b</code>: Move the cursor back one word.</li> <li><code>w</code>: Move the cursor forward one word.</li> <li><code>a</code>: Switch to input mode after the cursor.</li> </ul>"},{"location":"HTML/general/","title":"Table of Contents","text":""},{"location":"Node.js/general/","title":"Table of Contents","text":"<ul> <li>introNodejs</li> </ul>"},{"location":"Node.js/introNodejs/","title":"Introduction","text":"<p>Node.js is a powerful, open-source, server-side runtime environment built on Google Chrome's V8 JavaScript engine. It allows you to run JavaScript/Typescript code outside of a browser, making it possible to build scalable and high-performance applications.</p>"},{"location":"Node.js/introNodejs/#nodejs-benefits","title":"Node.js Benefits","text":"<ul> <li>Non-blocking I/O: Node.js uses an event-driven, non-blocking I/O model, which makes it lightweight and efficient for building scalable network applications.</li> <li>JavaScript Everywhere: With Node.js, you can use JavaScript for both client-side and server-side development.</li> <li>Large Ecosystem: Node.js has a huge amount of libraries and modules available through npm (Node Package Manager).</li> </ul>"},{"location":"Node.js/introNodejs/#getting-started","title":"Getting Started","text":""},{"location":"Node.js/introNodejs/#1-installation","title":"1. Installation","text":"<p>To begin, you need to install Node.js. You can download the installer from the official Node.js website, or for macOS and Linux users, you can also use a package manager.</p>"},{"location":"Node.js/introNodejs/#2-hello-world-example","title":"2. Hello World Example","text":"<p>Once Node.js is installed, you can create your first Node.js application.</p> <p>Create a new directory for your project:</p> <pre><code>mkdir my-node-app\ncd my-node-app\n</code></pre> <p>Create a new file named app.js:</p> <pre><code>touch app.js\n</code></pre> <p>Open app.js and add the following code:</p> <pre><code>// app.js\nconst http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) =&gt; {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello, World!\\n');\n});\n\nserver.listen(port, hostname, () =&gt; {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n</code></pre> <p>Run your application:</p> <pre><code>node app.js\n</code></pre> <p>Open your browser and navigate to http://localhost:3000 to see the message \"Hello, World!\"</p>"},{"location":"Node.js/introNodejs/#3-nodejs-modules","title":"3. Node.js Modules","text":"<p>Node.js uses a module system, which are ways to organize and reuse code. There are three types of modules:</p> <ul> <li>Core Modules: Built-in modules provided by Node.js (e.g., http, fs).</li> <li>Third-party Modules: Modules developed by the community and available through npm</li> <li>Custom Modules: Modules you create in your application.</li> </ul> <p>Example of using a core module:</p> <pre><code>// Using the 'fs' (File System) core module to read a file\nconst fs = require('fs');\n\nfs.readFile('example.txt', 'utf8', (err, data) =&gt; {\n  if (err) throw err;\n  console.log(data);\n});\n</code></pre> <ol> <li>Creating a RESTful API Node.js is commonly used to create RESTful APIs. Here is an example using Express:</li> </ol> <pre><code>// app.js\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\n// Middleware to parse JSON bodies\napp.use(express.json());\n\n// In-memory database (for simplicity)\nconst books = [];\n\n// Get all books\napp.get('/books', (req, res) =&gt; {\n  res.json(books);\n});\n\n// Add a new book\napp.post('/books', (req, res) =&gt; {\n  const book = req.body;\n  books.push(book);\n  res.status(201).json(book);\n});\n\napp.listen(port, () =&gt; {\n  console.log(`Server running at http://localhost:${port}`);\n});\n</code></pre>"},{"location":"Node.js/introNodejs/#6-file-system-operations","title":"6. File System Operations","text":"<p>Node.js provides a fs module to interact with the file system. Here are some basic operations:</p> <p>Read a file:</p> <pre><code>const fs = require('fs');\n\nfs.readFile('example.txt', 'utf8', (err, data) =&gt; {\n  if (err) throw err;\n  console.log(data);\n});\n</code></pre> <p>Write to a file:</p> <pre><code>const fs = require('fs');\n\nconst content = 'Hello, Node.js!';\n\nfs.writeFile('example.txt', content, (err) =&gt; {\n  if (err) throw err;\n  console.log('File has been saved!');\n});\n</code></pre>"},{"location":"Node.js/introNodejs/#7-error-handling","title":"7. Error Handling","text":"<p>Proper error handling is crucial in Node.js to prevent crashes and ensure a smooth user experience. Always handle errors in callbacks, promises, and async/await.</p> <p>Proper examples with callbacks:</p> <pre><code>const fs = require('fs');\n\nfs.readFile('example.txt', 'utf8', (err, data) =&gt; {\n  if (err) {\n    console.error('Error reading file:', err);\n    return;\n  }\n  console.log(data);\n});\n</code></pre> <p>Proper example with async/await:</p> <pre><code>const fs = require('fs').promises;\n\nasync function readFile() {\n  try {\n    const data = await fs.readFile('example.txt', 'utf8');\n    console.log(data);\n  } catch (err) {\n    console.error('Error reading file:', err);\n  }\n}\n\nreadFile();\n</code></pre>"},{"location":"React/compound-component/","title":"Compound Components","text":"<p>A compound component is a react pattern which allows you to share a commmon state within a component structure while maintaining a relationship between a parent component and it's children.</p>"},{"location":"React/compound-component/#how-compound-components-work","title":"How Compound Components Work","text":"<p>Structure: A compound component consists of a parent component and one or more child components. The parent component typically manages the shared state or functionality.</p> <p>State Sharing: The parent component can pass down state, functions, or any other necessary props to its children without having to pass props explicitly at every level.</p> <p>Flexibility: You can adjust the children in different ways to achieve flexible layouts while still maintaining a controlled behavior managed by the parent.</p>"},{"location":"React/custom-components/","title":"React Custom Components","text":"<p>What everyone uses React for! In React you can create functions to generate custom components to build out your architecture. While React provides a variety of built-in components, you will often need to create your own custom components to provide specific functionality and reusability.</p>"},{"location":"React/custom-components/#creating-custom-components","title":"Creating custom components","text":""},{"location":"React/custom-components/#functional-components","title":"Functional Components","text":"<p>Functional components are simple JavaScript functions that return JSX to define the UI. They are stateless by default.</p> <pre><code>import React from 'react';\n\nconst MyComponent = (props) =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{props.title}&lt;/h1&gt;\n      &lt;p&gt;{props.description}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default MyComponent;\n</code></pre>"},{"location":"React/custom-components/#class-components","title":"Class Components","text":"<p>Class components are classes that extend from React.Component. They have additional features such as state management and lifecycle methods, making them suitable for more complex components.</p> <pre><code>import React, { Component } from 'react';\n\nclass MyComponent extends Component {\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;{this.props.title}&lt;/h1&gt;\n        &lt;p&gt;{this.props.description}&lt;/p&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nexport default MyComponent;\n</code></pre>"},{"location":"React/custom-components/#properties-props","title":"Properties (Props)","text":"<p>Props (short for properties) are used to pass data from parent components to child components. They are immutable and are passed down through the component tree.</p> <pre><code>// ParentComponent.js\nimport React from 'react';\nimport MyComponent from './MyComponent';\n\nconst ParentComponent = () =&gt; {\n  return &lt;MyComponent title=\"Hello\" description=\"This is a custom component\" /&gt;;\n};\n\nexport default ParentComponent;\n</code></pre>"},{"location":"React/custom-components/#state","title":"State","text":"<p>State is used to manage component-specific data that may change over time. Class components have a built-in state feature, while functional components can use the useState hook.</p> <pre><code>// MyComponent.js\nimport React, { useState } from 'react';\n\nconst MyComponent = () =&gt; {\n  const [count, setCount] = useState(0);\n\n  const incrementCount = () =&gt; {\n    setCount(count + 1);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={incrementCount}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default MyComponent;\n</code></pre>"},{"location":"React/general/","title":"Table of Contents","text":"<ul> <li>compound-component</li> <li>useReducer</li> <li>react-refs</li> <li>validation-with-types</li> <li>preventdefault</li> <li>useDebugValue</li> <li>useMemo</li> <li>useImperativeHandle</li> <li>custom-components</li> <li>useLayoutEffect</li> <li>lifting-state</li> <li>useCallback</li> <li>prop-getters</li> <li>react-API</li> <li>useEffect</li> <li>useState</li> <li>useContext</li> </ul>"},{"location":"React/lifting-state/","title":"Lifting React States","text":""},{"location":"React/lifting-state/#introduction","title":"Introduction","text":"<p>In React, lifting a state up means lifting a shared state up to the closest common ancestor so that multiple components can access and modify the same state.</p>"},{"location":"React/lifting-state/#example","title":"Example:","text":"<p>The App.js file will be responsible for managing the shared username state and passing it down to both the UsernameInput and DisplayUsername components.</p> <pre><code>app.jsx:\n\nimport React, { useState } from 'react';\nimport UsernameInput from './UsernameInput';\nimport DisplayUsername from './DisplayUsername';\n\nfunction App() {\n  const [username, setUsername] = useState('');\n\n  // Function to update username\n  const handleUsernameChange = (newUsername) =&gt; {\n    setUsername(newUsername);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;User Profile&lt;/h1&gt;\n      &lt;UsernameInput username={username} onUsernameChange={handleUsernameChange} /&gt;\n      &lt;DisplayUsername username={username} /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n\n</code></pre> <p>The UsernameInput.js file provides an input field for users to type their username. It receives the current username and a function to update it from its parent.</p> <pre><code>import React from 'react';\n\nfunction UsernameInput({ username, onUsernameChange }) {\n  return (\n    &lt;div&gt;\n      &lt;label htmlFor=\"username\"&gt;Username: &lt;/label&gt;\n      &lt;input\n        id=\"username\"\n        type=\"text\"\n        value={username}\n        onChange={(e) =&gt; onUsernameChange(e.target.value)}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default UsernameInput;\n</code></pre> <p>The DisplayUsername.js component simply displays the current username. It receives the username as a prop from its parent component.</p> <pre><code>import React from 'react';\n\nfunction DisplayUsername({ username }) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Current Username: {username}&lt;/h2&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default DisplayUsername;\n</code></pre> <p>App.tsx acts as the common ancestor for usernameinput.js and displayusername.js. The state being passed is <code>username</code>, which gets passed to both child components, and is the \"lifted up\" state.</p>"},{"location":"React/preventdefault/","title":"preventDefault()","text":"<p>preventDefault() is React's way of providing a way to prevent the behavior of certain events, such as form submissions or link clicks.</p> <p><code>preventDefault()</code> is a method available on event objects in JavaScript. It is used to stop the default action of an event from occurring. For example, when a form is submitted, the browser typically reloads the page. By calling <code>preventDefault()</code> on the submit event, you can prevent this default behavior.</p>"},{"location":"React/preventdefault/#places-to-use-preventdefault","title":"Places to use preventDefault():","text":""},{"location":"React/preventdefault/#form-submissions","title":"Form Submissions:","text":"<p>When handling form submissions in React, you can prevent the default form submission behavior to perform custom validation or asynchronous operations, or prevent a page from rerendering.</p>"},{"location":"React/preventdefault/#link-clicks","title":"Link Clicks:","text":"<p>When handling clicks on anchor elements, you can to prevent the default navigation behavior to implement client-side routing.</p>"},{"location":"React/preventdefault/#keyboard-events","title":"Keyboard Events:","text":"<p>In certain cases, you cano prevent default keyboard shortcuts or actions from occurring when handling keyboard events.</p>"},{"location":"React/preventdefault/#preventdefault-example","title":"preventDefault() Example","text":"<p>Preventing a form submission:</p> <pre><code>import React from 'react';\n\nclass MyForm extends React.Component {\n  handleSubmit(event) {\n    event.preventDefault(); // Prevents the default form submission behavior\n    // Perform custom form handling logic here\n  }\n\n  render() {\n    return (\n      &lt;form onSubmit={this.handleSubmit}&gt;\n        &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n      &lt;/form&gt;\n    );\n  }\n}\n\n</code></pre>"},{"location":"React/prop-getters/","title":"Props Getter and Setter Pattern","text":"<p>The React Prop Getter and Collector strategy is a design pattern used primarily in React applications to manage and simplify the handling of  props within components. Prop Getters are functions that return props based on certain inputs, while Prop Collectors gather props from multiple sources and pass them to child components. </p>"},{"location":"React/prop-getters/#prop-getter-example","title":"Prop Getter Example","text":"<pre><code>function useInputProps(name) {\n  return {\n    id: `id_${name}`,\n    name: name,\n    type: 'text',\n    placeholder: `Enter ${name}`,\n  };\n}\n\nfunction Form() {\n  return (\n    &lt;form&gt;\n      &lt;input {...useInputProps('username')} autoComplete=\"username\" /&gt;\n      &lt;input {...useInputProps('password')} type=\"password\" autoComplete=\"current-password\" /&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre>"},{"location":"React/prop-getters/#prop-collector-example","title":"Prop Collector Example","text":"<pre><code>function useFormProps(initialValues) {\n  const [values, setValues] = React.useState(initialValues);\n\n  const handleChange = (event) =&gt; {\n    setValues({...values, [event.target.name]: event.target.value});\n  };\n\n  return { values, handleChange };\n}\n\nfunction ComplexForm() {\n  const formProps = useFormProps({username: '', password: ''});\n\n  return (\n    &lt;form&gt;\n      &lt;input {...useInputProps('username')} {...formProps} onChange={formProps.handleChange} /&gt;\n      &lt;input {...useInputProps('password')} {...formProps} type=\"password\" onChange={formProps.handleChange} /&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre>"},{"location":"React/react-API/","title":"Basic React APIs","text":""},{"location":"React/react-API/#introduction","title":"Introduction","text":"<p>React APIs are a way for a React application to interact with external services. They allow the application to send and receive data, enabling it to be dynamic and responsive.</p>"},{"location":"React/react-API/#types-of-apis","title":"Types of APIs","text":""},{"location":"React/react-API/#reactdom","title":"ReactDOM","text":"<p>This API provides methods for rendering React components into the DOM (Document Object Model). The <code>ReactDOM.render()</code> method is commonly used to mount a React component into a specific DOM node.</p>"},{"location":"React/react-API/#components","title":"Components","text":"<p>Components are the building blocks of React applications. They can be either functional components or class components. Functional components are simple JavaScript functions that return JSX (JavaScript XML), while class components are JavaScript classes that extend <code>React.Component</code> and implement a <code>render()</code> method.</p>"},{"location":"React/react-API/#props","title":"Props","text":"<p>Props (short for properties) are inputs to React components. They allow data to be passed from parent components to child components. Props are read-only and should not be modified by the component itself.</p>"},{"location":"React/react-API/#state","title":"State","text":"<p>State represents the internal data of a component. Unlike props, which are passed down from parent components, state is managed within the component itself. Changes to state trigger re-rendering of the component, updating the UI as necessary. State can be initialized in the constructor of a class component or using the <code>useState</code> hook in functional components.</p>"},{"location":"React/react-API/#hooks","title":"Hooks","text":"<p>Hooks are functions that enable functional components to use state and other React features without writing a class. Commonly used hooks include <code>useState</code>, <code>useEffect</code>, <code>useContext</code>, and <code>useReducer</code>.</p>"},{"location":"React/react-refs/","title":"React refs","text":"<p>Refs are unique to React. React provides refs as a way to acess DOM/React elements created in the render method.</p>"},{"location":"React/react-refs/#when-to-use-refs","title":"When to Use Refs","text":"<p>Refs should not be used often since manipulating DOM directly can lead to issues with React's rendering cycle. However, there are certain scenarios where refs are useful:</p>"},{"location":"React/react-refs/#accessing-dom-elements","title":"Accessing DOM Elements:","text":"<p>When you need to interact with a DOM element directly, such as focusing an input field or measuring its dimensions.</p>"},{"location":"React/react-refs/#managing-focus-text-selection-or-media-playback","title":"Managing Focus, Text Selection, or Media Playback:","text":"<p>Refs can be used to manage focus, select text, or control media playback.</p>"},{"location":"React/react-refs/#integrating-with-third-party-dom-libraries","title":"Integrating with Third-party DOM Libraries:","text":"<p>When integrating React with third-party DOM libraries that require direct access to DOM elements.</p>"},{"location":"React/react-refs/#creating-refs","title":"Creating Refs","text":"<p>Refs in React are created using the React.createRef() method. You can create a ref and attach it to a React element by using the ref attribute.</p> <pre><code>import React from 'react';\n\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n\n  render() {\n    return &lt;div ref={this.myRef}&gt;Example&lt;/div&gt;;\n  }\n}\n</code></pre>"},{"location":"React/useCallback/","title":"useCallback","text":"<p>useCallback is a React hook which returns a callback function that only changes if one of the dependancies change. It also prevents unnecessary rerenders if the callback hasn't updated.</p>"},{"location":"React/useCallback/#syntax","title":"Syntax","text":"<pre><code>const memoizedCallback = useCallback(() =&gt; {\n    // Function here\n}, [dependencies]);\n</code></pre>"},{"location":"React/useCallback/#example-use-case","title":"Example use case:","text":"<p>In this example, <code>increment</code> is only recreated if <code>count</code> changes, thus avoiding unnecessary re-renders if the <code>Counter</code> component renders for other reasons.</p> <pre><code>import React, { useState, useCallback } from 'react';\n\nfunction Counter() {\n    const [count, setCount] = useState(0);\n\n    const increment = useCallback(() =&gt; {\n        setCount(count + 1);\n    }, [count]);  // Dependency on 'count'. if count is ot changed, increment is not recreated\n\n    return (\n        &lt;div&gt;\n            Count: {count}\n            &lt;button onClick={increment}&gt;Increment&lt;/button&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default Counter;\n</code></pre>"},{"location":"React/useContext/","title":"useContext","text":"<p>useContext is a React hook that allows components to access the value of a React context, meaning you can pass informatioon through a component tree without having to manually pass props at every level.</p>"},{"location":"React/useContext/#usage","title":"Usage","text":"<p>1. Creating Context Use <code>React.createContext()</code> to create a new context. It returns an object with two components: <code>Provider</code> and <code>Consumer</code>, but with hooks, you generally use only the <code>Provider</code> and <code>useContext</code>.</p> <pre><code>const MyContext = React.createContext(defaultValue);\n</code></pre> <p>2. Provide a Context Value Use the <code>Provider</code> component at a higher level in your component tree and pass the context value via the <code>value</code> prop.</p> <pre><code>&lt;MyContext.Provider value={someValue}&gt;\n  &lt;MyComponent /&gt;\n&lt;/MyContext.Provider&gt;\n</code></pre> <p>3. Consume the Context Inside any functional component, call <code>useContext</code> and pass in the context object you created. It will return the current context value.</p> <pre><code>function MyComponent() {\n  const value = useContext(MyContext);\n  return &lt;div&gt;{value}&lt;/div&gt;;\n}\n</code></pre>"},{"location":"React/useContext/#best-practices","title":"Best Practices","text":"<p>Scope Context Properly: Use context for global states that are accessed by many components (e.g., theme, user authentication). Avoid overuse which can lead to maintainability issues.</p> <p>Combine with Other Hooks: useContext can be combined with other hooks like useReducer or useState to manage and distribute state.</p>"},{"location":"React/useDebugValue/","title":"useDebugValue","text":"<p>useDebugValue is a custom hook that allows you to display a label for custom hooks in React DevTools. This can be useful for debugging custom hooks. You can only use useDebugValue inside custom hooks.</p>"},{"location":"React/useDebugValue/#syntax","title":"Syntax","text":"<pre><code>import { useDebugValue } from 'react';\n\nfunction useOnlineStatus() {\n  // ...\n  useDebugValue(isOnline ? 'Online' : 'Offline');\n  // ...\n}\n</code></pre> <p>useDebugValue should be used with caution, and don\u2019t add debug values to every custom Hook. It\u2019s most valuable for custom Hooks that are part of shared libraries and that have a complex internal data structure that\u2019s difficult to inspect.</p>"},{"location":"React/useEffect/","title":"useEffect","text":"<p>In React's functional components, managing side effects\u2014operations that affect something outside the scope of the function being executed\u2014is crucial for handling data fetching, subscriptions, manually changing the DOM, etc. The useEffect hook performs side effects in functional components.</p>"},{"location":"React/useEffect/#syntax","title":"Syntax","text":"<pre><code>useEffect(() =&gt; {\n  // logic here\n}, [dependencies]);\n</code></pre> <p>The first argument is a function that will run after every render by default.</p> <p>The second argument is an optional array of dependencies that triggers the effect only when any of them changes.</p>"},{"location":"React/useEffect/#dependancy-arrays","title":"Dependancy Arrays","text":"<p>The dependency array is a feature of useEffect that controls when the effect function runs. Here are the types:</p> <ul> <li>No dependency ([]): The effect runs only once after the initial render, similar to componentDidMount.</li> <li>With dependencies ([deps]): The effect runs whenever any value in the dependencies array changes, in addition to after the initial render.</li> <li>No array provided: The effect runs after every render.</li> </ul>"},{"location":"React/useEffect/#cleanup-functions","title":"Cleanup functions","text":"<p><code>useEffect</code> allows you to return a function from the effect to prevent memory leaks:</p> <pre><code>useEffect(() =&gt; {\n  // Setup logic\n  return () =&gt; {\n    // Cleanup logic\n  };\n}, [dependencies]);\n</code></pre>"},{"location":"React/useEffect/#common-uses","title":"Common uses","text":"<ul> <li>Fetching Data: Perform API calls and update the component state with the fetched data.</li> <li>Listening to Events: Attach and detach event listeners for user actions or global events.</li> <li>Manually Manipulating the DOM: Directly manipulate the DOM when necessary, though React encourages avoiding direct DOM manipulations. </li> </ul>"},{"location":"React/useImperativeHandle/","title":"useImperativeHandle","text":"<p>useImperativeHandle customizes the instance value that is exposed to parent components when using <code>ref</code>. This hook should be together with <code>forwardRef</code>. This is a pretty specific hook with limited use cases.</p>"},{"location":"React/useImperativeHandle/#syntax","title":"Syntax","text":"<pre><code>useImperativeHandle(ref, createHandle, [deps])\n</code></pre> <p><code>ref</code>: The ref passed from the parent component.</p> <p><code>createHandle</code>: A function that returns an object containing the values or functions to be exposed.</p> <p><code>deps</code>: (Optional) An array of dependencies that triggers re-creation of the handle if they change.</p>"},{"location":"React/useLayoutEffect/","title":"useLayoutEffect","text":"<p>useLayoutEffect is a version of the React hook useEffect that fires before a broswer repaints a screen.</p>"},{"location":"React/useLayoutEffect/#syntax","title":"Syntax","text":"<pre><code>useLayoutEffect(setup, dependencies?)\n</code></pre> <p>useLayoutEffect runs synchronously after all DOM changes but before the browser paints. This makes it useful for reading layout from the DOM and then synchronously re-rendering, ensuring the updates are invisible to the user.</p>"},{"location":"React/useLayoutEffect/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Measuring and changing the DOM</li> <li>Performing animations</li> </ul> <p>Note that it should be used sparingly because it blocks visual updates until the callback is completed. It can cause noticeable delays in the UI rendering.</p>"},{"location":"React/useMemo/","title":"useMemo in React","text":"<p>useMemo is a React hook that optimizes performance by memoizing values. React will store the result of a function and only recalculate it when one of its dependencies changes, rather than on every render. </p>"},{"location":"React/useMemo/#syntax","title":"Syntax","text":"<pre><code>const memoizedValue = useMemo(() =&gt; computationalExpensiveValue(a, b), [a, b]);\n</code></pre> <p><code>memoizedValue</code> takes <code>a</code> and <code>b</code> as arguements, and React will only rerun the function of the values of <code>a</code> or <code>b</code> changes between renders. Otherwise, it will use a memoized version of <code>a</code> and <code>b</code> from the previous render to avoid any unnecessary recalculations.</p>"},{"location":"React/useMemo/#use-cases","title":"Use Cases:","text":"<p>Performance Optimization: For heavy computations that depend on specific props or state and don't need to be recalculated unless these dependencies change. Referential Equality: Ensuring that objects, arrays, or functions maintain referential equality across renders if their contents have not changed, which can be crucial for optimizing child components that rely on object equality to prevent unnecessary re-renders.</p> <p>Don't use useMemo everwhere. Memoized values need to be stored in memory, and can cause lag if overused. React\u2019s team suggests using it as an optimization, not a default approach for every function or value.</p>"},{"location":"React/useReducer/","title":"useReducer","text":"<p>useReducer is a hook in React which handles states that have sub-values. It is essentially used to return an updated state from an intital one.</p>"},{"location":"React/useReducer/#syntax","title":"Syntax","text":"<pre><code>const [state, dispatch] = useReducer(reducer, initialState);\n</code></pre> <p><code>reducer</code>: A function that determines the changes to an application's state. It uses the current state and an action object to compute the next state.</p> <p><code>initialState</code>: The initial state value of the reducer.</p>"},{"location":"React/useReducer/#usereducer-use-example","title":"useReducer Use Example:","text":"<pre><code>function reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    default:\n      throw new Error();\n  }\n}\n</code></pre>"},{"location":"React/useState/","title":"useState","text":"<p><code>useState</code> in React is how you manage states. States refer to data or properties that need to be tracked in an application. These data points can change over time and affect the behavior and appearance of a component.</p>"},{"location":"React/useState/#usestate_1","title":"<code>useState</code>","text":"<p>Initializing <code>useState</code> returns an array containing two elements: the current state value and a function that allows you to update it. This mechanism provides a way to declare state variables in functional components.</p>"},{"location":"React/useState/#syntax","title":"Syntax","text":"<pre><code>const [state, setState] = useState(initialState);\n</code></pre> <p><code>initialState</code>: The initial value of the state variable. This argument is only used during the first render.</p> <p><code>state</code>: The current state value.</p> <p><code>setState</code>: A function that updates the state value.</p>"},{"location":"React/useState/#example","title":"Example","text":"<p>Here is a simple example demonstrating how to use useState to manage a counter within a functional component:</p> <pre><code>\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  // Declare a new state variable called \"count\"\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Click me\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Here, <code>useState</code> sets a <code>count</code> initialized to 0. You would then call <code>setCount</code> to update <code>count</code> when the button is clicked.</p> <p>*** Treat state as immutable. Always use the setter function to update state variables instead of modifying them directly.</p>"},{"location":"React/validation-with-types/","title":"Validating with PropType and Typescript","text":""},{"location":"React/validation-with-types/#define-proptypes-for-components","title":"Define PropTypes for Components","text":"<p>In your TypeScript React components, you can define PropTypes using the PropTypes object provided by the prop-types library:</p> <pre><code>import React from 'react';\nimport PropTypes from 'prop-types';\n\ninterface MyComponentProps {\n  title: string;\n  description: string;\n}\n\nconst MyComponent: React.FC&lt;MyComponentProps&gt; = ({ title, description }) =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{title}&lt;/h1&gt;\n      &lt;p&gt;{description}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nMyComponent.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired\n};\n\nexport default MyComponent;\n</code></pre> <p>This defines a MyComponentProps interface to specify the expected props for MyComponent. Then it uses PropTypes to define the PropTypes for each prop.</p>"},{"location":"React/validation-with-types/#proptype-features","title":"PropType Features:","text":""},{"location":"React/validation-with-types/#runtime-validation","title":"Runtime Validation:","text":"<p>PropTypes provides runtime validation of props. It checks the types of props during runtime and issues warnings in development if the props don't match the specified types. This helps catch errors early during development.</p>"},{"location":"React/validation-with-types/#documentation","title":"Documentation:","text":"<p>PropTypes serve as a form of documentation for components. By specifying PropTypes, developers can understand what props are expected by a component and their types.</p>"},{"location":"React/validation-with-types/#optional","title":"Optional:","text":"<p>PropTypes are optional. You can choose to use them or not, depending on your preference or project requirements. PropTypes are actually removed during the compling to make it more performant.</p>"},{"location":"React/validation-with-types/#typescript-types","title":"TypeScript Types:","text":""},{"location":"React/validation-with-types/#compile-time-type-checking","title":"Compile-time Type Checking:","text":"<p>TypeScript types provide static type-checking at compile time. This means that type errors are caught during development before the code is executed. This can lead to more robust code and fewer runtime errors.</p>"},{"location":"React/validation-with-types/#strict-typing","title":"Strict Typing:","text":"<p>TypeScript offers strict typing, which means that types are enforced more rigorously compared to PropTypes. TypeScript can infer types from the code or explicitly define types using annotations.</p>"},{"location":"React/validation-with-types/#tooling-support","title":"Tooling Support:","text":"<p>TypeScript provides better tooling support, such as code completion, refactoring, and type inference in modern code editors. This can improve developer productivity and reduce errors.</p>"},{"location":"React/validation-with-types/#interfaces-and-unions","title":"Interfaces and Unions:","text":"<p>TypeScript allows defining interfaces, types, and unions of types, providing more expressive and precise type definitions. This can lead to more maintainable and understandable code.</p>"},{"location":"React/validation-with-types/#native-support","title":"Native Support:","text":"<p>TypeScript is natively supported by the language, while PropTypes is a separate library that needs to be installed and imported into the project.</p>"},{"location":"Redux/general/","title":"Table of Contents","text":"<ul> <li>reduxStateManagement</li> </ul>"},{"location":"Redux/reduxStateManagement/","title":"reduxStateManagement","text":"<p>Redux is a JS library for predictable and maintainable global state management. It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test.</p>"},{"location":"Redux/reduxStateManagement/#global-state-management","title":"Global State Management","text":"<p>Redux is often used to manage global state that needs to be accessed and modified across multiple components. This includes user authentication, application settings, and shared data.</p> <pre><code>// actions.js\nexport const setUser = (user) =&gt; ({ type: 'SET_USER', payload: user });\nexport const logout = () =&gt; ({ type: 'LOGOUT' });\n\n// reducer.js\nconst initialState = { user: null };\nconst authReducer = (state = initialState, action) =&gt; {\n  switch (action.type) {\n    case 'SET_USER':\n      return { ...state, user: action.payload };\n    case 'LOGOUT':\n      return { ...state, user: null };\n    default:\n      return state;\n  }\n};\n\n// store.js\nimport { createStore } from 'redux';\nimport authReducer from './reducer';\nconst store = createStore(authReducer);\n\n// In a component\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setUser, logout } from './actions';\n\nconst Component = () =&gt; {\n  const user = useSelector((state) =&gt; state.user);\n  const dispatch = useDispatch();\n\n  // Use user state and dispatch actions\n};\n</code></pre>"},{"location":"Redux/reduxStateManagement/#managing-complex-ui-state","title":"Managing Complex UI State","text":"<p>Redux can manage complex UI states such as modal visibility, form state, and multi-step processes. Centralizing state management helps maintain a clear state flow.</p> <pre><code>// actions.js\nexport const openModal = () =&gt; ({ type: 'OPEN_MODAL' });\nexport const closeModal = () =&gt; ({ type: 'CLOSE_MODAL' });\n\n// reducer.js\nconst initialState = { isModalOpen: false };\nconst uiReducer = (state = initialState, action) =&gt; {\n  switch (action.type) {\n    case 'OPEN_MODAL':\n      return { ...state, isModalOpen: true };\n    case 'CLOSE_MODAL':\n      return { ...state, isModalOpen: false };\n    default:\n      return state;\n  }\n};\n\n// In a component\nconst ModalComponent = () =&gt; {\n  const isModalOpen = useSelector((state) =&gt; state.isModalOpen);\n  const dispatch = useDispatch();\n\n  // Use modal state and dispatch actions\n};\n</code></pre>"},{"location":"Redux/reduxStateManagement/#synchronizing-state-with-local-storage","title":"Synchronizing State with Local Storage","text":"<p>Redux can synchronize state with local storage to ensure persistence across page reloads. This is often used for user settings, preferences, and session data.</p> <pre><code>// middleware.js\nconst localStorageMiddleware = store =&gt; next =&gt; action =&gt; {\n  let result = next(action);\n  if (action.type === 'SET_THEME') {\n    localStorage.setItem('theme', store.getState().theme);\n  }\n  return result;\n};\n\n// store.js\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers';\nimport localStorageMiddleware from './middleware';\n\nconst store = createStore(rootReducer, applyMiddleware(localStorageMiddleware));\n\n// actions.js\nexport const setTheme = (theme) =&gt; ({ type: 'SET_THEME', payload: theme });\n\n// reducer.js\nconst initialState = { theme: localStorage.getItem('theme') || 'light' };\nconst settingsReducer = (state = initialState, action) =&gt; {\n  switch (action.type) {\n    case 'SET_THEME':\n      return { ...state, theme: action.payload };\n    default:\n      return state;\n  }\n};\n\n// In a component\nconst ThemeSwitcher = () =&gt; {\n  const theme = useSelector((state) =&gt; state.theme);\n  const dispatch = useDispatch();\n\n  // Use theme state and dispatch action\n};\n</code></pre>"},{"location":"Redux/reduxStateManagement/#handling-form-state","title":"Handling Form State","text":"<p>Redux can manage the state of complex forms, including field values, validation, and submission state. This centralizes form logic and makes components cleaner.</p> <pre><code>// actions.js\nexport const setField = (field, value) =&gt; ({ type: 'SET_FIELD', payload: { field, value } });\nexport const resetForm = () =&gt; ({ type: 'RESET_FORM' });\n\n// reducer.js\nconst initialState = { formData: {} };\nconst formReducer = (state = initialState, action) =&gt; {\n  switch (action.type) {\n    case 'SET_FIELD':\n      return { ...state, formData: { ...state.formData, [action.payload.field]: action.payload.value } };\n    case 'RESET_FORM':\n      return { ...state, formData: {} };\n    default:\n      return state;\n  }\n};\n\n// In a component\nconst FormComponent = () =&gt; {\n  const formData = useSelector((state) =&gt; state.formData);\n  const dispatch = useDispatch();\n\n  // Use form state and dispatch actions\n};\n</code></pre>"},{"location":"Redux/reduxStateManagement/#managing-async-state","title":"Managing Async State","text":"<p>Redux is often used to manage async state, such as data fetching from APIs, handling loading and error states.</p> <pre><code>// actions.js\nexport const fetchDataRequest = () =&gt; ({ type: 'FETCH_DATA_REQUEST' });\nexport const fetchDataSuccess = (data) =&gt; ({ type: 'FETCH_DATA_SUCCESS', payload: data });\nexport const fetchDataFailure = (error) =&gt; ({ type: 'FETCH_DATA_FAILURE', payload: error });\n\n// thunk.js\nexport const fetchData = (url) =&gt; async (dispatch) =&gt; {\n  dispatch(fetchDataRequest());\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    dispatch(fetchDataSuccess(data));\n  } catch (error) {\n    dispatch(fetchDataFailure(error));\n  }\n};\n\n// reducer.js\nconst initialState = { data: null, loading: false, error: null };\nconst asyncReducer = (state = initialState, action) =&gt; {\n  switch (action.type) {\n    case 'FETCH_DATA_REQUEST':\n      return { ...state, loading: true, error: null };\n    case 'FETCH_DATA_SUCCESS':\n      return { ...state, data: action.payload, loading: false };\n    case 'FETCH_DATA_FAILURE':\n      return { ...state, error: action.payload, loading: false };\n    default:\n      return state;\n  }\n};\n\n// In a component\nconst DataFetchingComponent = () =&gt; {\n  const { data, loading, error } = useSelector((state) =&gt; state);\n  const dispatch = useDispatch();\n\n  useEffect(() =&gt; {\n    dispatch(fetchData('https://api.example.com/data'));\n  }, [dispatch]);\n\n  // Use async state and actions\n};\n</code></pre>"},{"location":"Tailwind/customizations/","title":"Custom Tailwind Configurations","text":""},{"location":"Tailwind/customizations/#basic-customization","title":"Basic Customization","text":"<p>Customizing Colors Tailwind comes with a default palette, but you can define your own colors by editing the <code>tailwind.config.js</code> file like so:</p> <pre><code>module.exports = {\n  theme: {\n    extend: {\n      colors: {\n        'branding-blue': '#5ca9fb',\n        'branding-red': '#f56565',\n      }\n    }\n  }\n}\n</code></pre> <p>Font Families To add custom fonts, first import them, then update the <code>tailwind.config.js</code>:</p> <pre><code>module.exports = {\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: ['Inter var', 'sans-serif'],\n        serif: ['Merriweather', 'serif'],\n      }\n    }\n  }\n}\n</code></pre> <p>Breakpoints</p> <pre><code>module.exports = {\n  theme: {\n    extend: {\n      screens: {\n        '2xl': '1440px',\n        '3xl': '1920px',\n      }\n    }\n  }\n}\n</code></pre> <p>Custom Utilities The <code>addUtilities</code> function takes two parameters:</p> <ul> <li> <p>The first parameter is an object where the keys are the class names and the values are the CSS styles.</p> </li> <li> <p>The second parameter is an array of variants you want to generate for these utilities, such as responsive, hover, focus, etc.</p> </li> </ul> <pre><code>module.exports = {\n  plugins: [\n    function({ addUtilities }) {\n      const newUtilities = {\n        '.filter-none': {\n          filter: 'none',\n        },\n        '.filter-grayscale': {\n          filter: 'grayscale(100%)',\n        },\n      }\n\n      addUtilities(newUtilities, ['responsive', 'hover']);\n    }\n  ],\n}\n</code></pre>"},{"location":"Tailwind/general/","title":"Table of Contents","text":"<ul> <li>customizations</li> <li>settingUpWithVite</li> </ul>"},{"location":"Tailwind/settingUpWithVite/","title":"Setting Up Tailwind CSS with Vite","text":"<p>Vite is a modern frontend building tool which makes dev much easier. Using tailwind with Vite requires a few extra steps.</p>"},{"location":"Tailwind/settingUpWithVite/#create-new-project","title":"Create New Project","text":"<pre><code>npm create vite@latest my-vite-app -- --template vanilla\n</code></pre> <p>Set up your Vite project like so:</p> <pre><code>cd my-vite-app\n</code></pre>"},{"location":"Tailwind/settingUpWithVite/#install-tailwind","title":"Install Tailwind","text":"<pre><code>npm install -D tailwindcss@latest postcss@latest autoprefixer@latest\n</code></pre> <p>Init Tailwind Files:</p> <pre><code>npx tailwindcss init -p\n</code></pre> <p>This command creates a <code>tailwind.config.js</code> and a <code>postcss.config.js</code> file in your project directory.</p>"},{"location":"Tailwind/settingUpWithVite/#configure-tailwind","title":"Configure Tailwind","text":"<p>Edit the tailwind.config.js file to enable purge in production. This step helps to remove unused CSS to optimize the final build size. Update the content path to match the files where you use Tailwind classes:</p> <pre><code>module.exports = {\n  content: [\"./index.html\", \"./src/**/*.{js,jsx,ts,tsx,vue}\"],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n</code></pre> <p>*Vite projects specifically need index.html added.</p>"},{"location":"Tailwind/settingUpWithVite/#include-tailwind-in-your-css-and-import-in-main","title":"Include Tailwind in your CSS and import in main","text":"<p>You may need to create a file if you don't already have one.</p> <pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre> <p>Import this into your main file.</p> <pre><code>import './style.css';\n</code></pre>"},{"location":"Vite/general/","title":"Table of Contents","text":"<ul> <li>viteBasics</li> </ul>"},{"location":"Vite/viteBasics/","title":"Vite Basics","text":"<p>Vite is a modern frontend building tool which leverages native ES modules to provide a better dev experience. Vite enables Hot Module Replacement (HMR).</p>"},{"location":"Vite/viteBasics/#vites-benefits","title":"Vite's Benefits","text":"<p>Fast Server Start: Vite starts up almost instantaneously, regardless of the size of your project. Instant Hot Module Replacement (HMR): Enjoy almost instantaneous updates as you modify your application during development. Out-of-the-Box Support: Vite comes with built-in support for TypeScript, JavaScript, CSS, PostCSS, and popular frameworks like Vue, React, and Svelte. Optimized Build: Vite uses Rollup under the hood for its production builds, which results in optimized and efficient bundling. Rich Features: Supports features like CSS code splitting, asset importing, and more.</p>"},{"location":"Vue.js/general/","title":"Table of Contents","text":""},{"location":"Zustand/general/","title":"Table of Contents","text":"<ul> <li>zustandVSredux</li> <li>zustandStateManagement</li> </ul>"},{"location":"Zustand/zustandStateManagement/","title":"zustandStateManagement","text":"<p>Zustand is a small, fast, and scalable state management library for React known for its simplicity and minimalistic approach.</p>"},{"location":"Zustand/zustandStateManagement/#global-state-management","title":"Global State Management","text":"<p>Zustand is often used to manage global states that need to be accessed and modified across multiple components. This can include user authentication status, theme settings, or application-wide configuration.</p> <p>Example:</p> <pre><code>import create from 'zustand';\n\nconst useStore = create((set) =&gt; ({\n  user: null,\n  setUser: (user) =&gt; set({ user }),\n  logout: () =&gt; set({ user: null }),\n}));\n\n// In a component\nconst Component = () =&gt; {\n  const { user, setUser, logout } = useStore();\n  // Use user state and actions\n};\n</code></pre>"},{"location":"Zustand/zustandStateManagement/#managing-complex-ui-states","title":"Managing Complex UI States","text":"<p>Zustand can manage complex UI states such as modal visibility, form state, and multi-step processes. This can simplify the logic in individual components by centralizing the state management.</p> <pre><code>const useUIStore = create((set) =&gt; ({\n  isModalOpen: false,\n  openModal: () =&gt; set({ isModalOpen: true }),\n  closeModal: () =&gt; set({ isModalOpen: false }),\n}));\n\n// In a component\nconst ModalComponent = () =&gt; {\n  const { isModalOpen, openModal, closeModal } = useUIStore();\n  // Use modal state and actions\n};\n</code></pre>"},{"location":"Zustand/zustandStateManagement/#syncing-state-with-local-storage","title":"Syncing State with Local Storage","text":"<p>Zustand can be used to synchronize state with local storage, so that certain states persist across page reloads. Useful for settings, preferences, or user data that should persist.</p> <pre><code>const usePersistedStore = create((set) =&gt; ({\n  theme: localStorage.getItem('theme') || 'light',\n  setTheme: (theme) =&gt; {\n    localStorage.setItem('theme', theme);\n    set({ theme });\n  },\n}));\n\n// In a component\nconst ThemeSwitcher = () =&gt; {\n  const { theme, setTheme } = usePersistedStore();\n  // Use theme state and action\n};\n</code></pre>"},{"location":"Zustand/zustandStateManagement/#handling-form-state","title":"Handling Form State","text":"<p>Zustand can manage the state of complex forms, including form fields, validation, and submission state.</p> <pre><code>const useFormStore = create((set) =&gt; ({\n  formData: {},\n  setField: (field, value) =&gt; set((state) =&gt; ({\n    formData: { ...state.formData, [field]: value },\n  })),\n  resetForm: () =&gt; set({ formData: {} }),\n}));\n\n// In a component\nconst FormComponent = () =&gt; {\n  const { formData, setField, resetForm } = useFormStore();\n  // Use form state and actions\n};\n</code></pre>"},{"location":"Zustand/zustandStateManagement/#managing-async-state","title":"Managing Async State","text":"<p>Zustand is also used to manage async state, such as fetching data from an API and handling loading and error states.</p> <pre><code>const useAsyncStore = create((set) =&gt; ({\n  data: null,\n  loading: false,\n  error: null,\n  fetchData: async (url) =&gt; {\n    set({ loading: true, error: null });\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      set({ data, loading: false });\n    } catch (error) {\n      set({ error, loading: false });\n    }\n  },\n}));\n\n// In a component\nconst DataFetchingComponent = () =&gt; {\n  const { data, loading, error, fetchData } = useAsyncStore();\n  // Use async state and actions\n};\n</code></pre>"},{"location":"Zustand/zustandStateManagement/#shared-state-between-sibling-components","title":"Shared State Between Sibling Components","text":"<p>Zustand can share state between sibling components without having to lift state up to a common parent. This can reduce the complexity of the component tree.</p> <pre><code>const useSharedStateStore = create((set) =&gt; ({\n  sharedValue: 0,\n  increment: () =&gt; set((state) =&gt; ({ sharedValue: state.sharedValue + 1 })),\n  decrement: () =&gt; set((state) =&gt; ({ sharedValue: state.sharedValue - 1 })),\n}));\n\n// In sibling components\nconst ComponentA = () =&gt; {\n  const { sharedValue, increment } = useSharedStateStore();\n  // Use shared state and actions\n};\n\nconst ComponentB = () =&gt; {\n  const { sharedValue, decrement } = useSharedStateStore();\n  // Use shared state and actions\n};\n</code></pre>"},{"location":"Zustand/zustandVSredux/","title":"Comparison of Zustand and Redux for State Management in React Applications","text":""},{"location":"Zustand/zustandVSredux/#introduction","title":"Introduction","text":"<p>State management is a huge part of React application development, especially as applications grow in complexity. Zustand and Redux are two popular state management libraries, each with its unique features and use cases.</p>"},{"location":"Zustand/zustandVSredux/#1-overview","title":"1. Overview","text":""},{"location":"Zustand/zustandVSredux/#zustand","title":"Zustand:","text":"<p>A small, fast, and scalable state management library. Minimalistic and lightweight, with a simple API. Focuses on ease of use and performance.</p>"},{"location":"Zustand/zustandVSredux/#redux","title":"Redux:","text":"<p>A predictable state container for JavaScript applications. Widely adopted and supported by a robust ecosystem. Emphasizes strict unidirectional data flow and state immutability.</p>"},{"location":"Zustand/zustandVSredux/#2-installation-and-setup","title":"2. Installation and Setup","text":""},{"location":"Zustand/zustandVSredux/#zustand_1","title":"Zustand:","text":"<p>Simple installation and setup process.</p> <pre><code>npm install zustand\n</code></pre>"},{"location":"Zustand/zustandVSredux/#redux_1","title":"Redux:","text":"<p>Installation involves setting up Redux and often additional libraries like Redux Thunk or Redux Toolkit for improved usability.</p> <pre><code>npm install redux react-redux\n</code></pre>"},{"location":"Zustand/zustandVSredux/#3-boilerplate-code","title":"3. Boilerplate Code","text":"<p>Boilerplate code is code that gets repeated throughout the application. It typically includes configuration settings, environment setup, initialization of libraries or frameworks, and other foundational tasks.</p>"},{"location":"Zustand/zustandVSredux/#zustand_2","title":"Zustand:","text":"<p>Minimal boilerplate code. State and actions are defined in a single location:</p> <pre><code>import create from 'zustand';\n\nconst useStore = create((set) =&gt; ({\n  count: 0,\n  increment: () =&gt; set((state) =&gt; ({ count: state.count + 1 })),\n}));\n</code></pre>"},{"location":"Zustand/zustandVSredux/#redux_2","title":"Redux:","text":"<p>Requires more boilerplate code to set up actions, reducers, and the store.</p> <pre><code>// actions.js\nexport const increment = () =&gt; ({ type: 'INCREMENT' });\n\n// reducer.js\nconst initialState = { count: 0 };\n\nconst counterReducer = (state = initialState, action) =&gt; {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { count: state.count + 1 };\n    default:\n      return state;\n  }\n};\n\n// store.js\nimport { createStore } from 'redux';\nimport counterReducer from './reducer';\n\nconst store = createStore(counterReducer);\n</code></pre>"},{"location":"Zustand/zustandVSredux/#4-state-management-approach","title":"4. State Management Approach","text":""},{"location":"Zustand/zustandVSredux/#zustand_3","title":"Zustand:","text":"<ul> <li>Centralized state management using hooks.</li> <li>State and actions are defined together, making it easy to manage and understand.</li> <li>Uses the React context internally but is designed to be more performant.</li> </ul>"},{"location":"Zustand/zustandVSredux/#redux_3","title":"Redux:","text":"<ul> <li>Centralized state management with a unidirectional data flow.</li> <li>State is updated through actions and reducers, promoting strict state immutability.</li> <li>Encourages separation of concerns but can be verbose and complex for simple use cases.</li> </ul>"},{"location":"Zustand/zustandVSredux/#5-middleware-and-async-actions","title":"5. Middleware and Async Actions","text":""},{"location":"Zustand/zustandVSredux/#zustand_4","title":"Zustand:","text":"<p>Does not have built-in middleware but can handle async actions using async/await within actions.</p> <pre><code>const useStore = create((set) =&gt; ({\n  data: null,\n  fetchData: async () =&gt; {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    set({ data });\n  },\n}));\n</code></pre>"},{"location":"Zustand/zustandVSredux/#redux_4","title":"Redux:","text":"<p>Supports middleware to handle side effects, with popular choices being Redux Thunk and Redux Saga. Redux Thunk allows you to write action creators that return a function instead of an action.</p> <pre><code>// actions.js\nexport const fetchData = () =&gt; async (dispatch) =&gt; {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n  dispatch({ type: 'SET_DATA', payload: data });\n};\n</code></pre>"},{"location":"Zustand/zustandVSredux/#6-developer-experience","title":"6. Developer Experience","text":""},{"location":"Zustand/zustandVSredux/#zustand_5","title":"Zustand:","text":"<ul> <li>Simple API and minimal setup enhance developer experience.</li> <li>Easier to learn and use, especially for smaller projects.</li> <li>Less boilerplate means quicker development cycles.</li> </ul>"},{"location":"Zustand/zustandVSredux/#redux_5","title":"Redux:","text":"<ul> <li>Strong tooling support, including Redux DevTools for state inspection and time-travel debugging.</li> <li>Well-suited for large-scale applications where strict state management practices are beneficial.</li> <li>The learning curve can be steep due to the complexity and verbosity of the setup.</li> </ul>"},{"location":"Zustand/zustandVSredux/#7-performance","title":"7. Performance","text":""},{"location":"Zustand/zustandVSredux/#zustand_6","title":"Zustand:","text":"<p>Designed for performance, with minimal re-renders. Efficient for managing state in both small and large applications.</p>"},{"location":"Zustand/zustandVSredux/#redux_6","title":"Redux:","text":"<p>Performance can be optimized but may require additional configuration. Good for large applications with complex state logic.</p>"},{"location":"Zustand/zustandVSredux/#choose-zustand-if","title":"Choose Zustand if:","text":"<ul> <li>You want a simple, minimalistic state management solution.</li> <li>Your application is small to medium-sized.</li> <li>You want to avoid boilerplate and quickly set up state management.</li> </ul>"},{"location":"Zustand/zustandVSredux/#choose-redux-if","title":"Choose Redux if:","text":"<ul> <li>You are building a large-scale application with complex state logic.</li> <li>You need a predictable state container with strict immutability and unidirectional data flow.</li> <li>You could benefit from the extensive tooling and middleware ecosystem provided by Redux.</li> </ul>"},{"location":"jQuery/general/","title":"Table of Contents","text":"<ul> <li>jQueryBasics</li> <li>jQueryAjax</li> <li>jQueryMobile</li> <li>jQueryDOM</li> <li>jQueryUI</li> </ul>"},{"location":"jQuery/jQueryAjax/","title":"jQuery and Ajax","text":"<p>AJAX (Asynchronous JavaScript and XML) allows web applications to send and retrieve data from a server asynchronously, without interfering with the display and behavior of the existing page. jQuery simplifies the creation and management of AJAX calls, making it easier to implement into web projects.</p>"},{"location":"jQuery/jQueryAjax/#basic-requests","title":"Basic Requests","text":"<p>GET Request The simplest AJAX request is a GET request, used to retrieve data from the server:</p> <pre><code>$.get('server/data', function(data) {\n    console.log('Data received:', data);\n});\n</code></pre> <p>This code fetches data from <code>server/data</code> and logs it to the console.</p> <p>POST Request A POST request is used to send data to the server:</p> <pre><code>$.post('server/submit', {username: 'user', password: 'pass'}, function(response) {\n    console.log('Server response:', response);\n});\n</code></pre> <p>This sends username and password data to <code>server/submit</code> and logs the server's response.</p>"},{"location":"jQuery/jQueryAjax/#more-advanced-requests","title":"More Advanced Requests","text":"<p>jQuery provides the <code>$.ajax()</code> method, which allows detailed configuration:</p> <pre><code>$.ajax({\n    url: 'server/data',\n    type: 'GET', // Can be GET, POST, PUT, DELETE, etc.\n    success: function(data) {\n        console.log('Success:', data);\n    },\n    error: function(error) {\n        console.log('Error:', error);\n    }\n});\n</code></pre>"},{"location":"jQuery/jQueryAjax/#handling-json-data","title":"Handling JSON Data","text":"<p>jQuery handles JSON:</p> <pre><code>$.getJSON('server/data.json', function(data) {\n    console.log('JSON received:', data);\n});\n</code></pre> <p>This fetches JSON data from the server and logs it.</p>"},{"location":"jQuery/jQueryAjax/#ajax-settings-and-callbacks","title":"AJAX Settings and Callbacks","text":"<p>jQuery AJAX methods include various settings and callback functions to handle different scenarios:</p> <p>beforeSend: Function to run before sending the AJAX request. complete: Function to run after the request completes (regardless of success or error).</p> <p>success: Function to run when the request succeeds.</p> <p>error: Function to handle when the request fails. Example using these settings:</p> <pre><code>$.ajax({\n    url: 'server/action',\n    beforeSend: function() {\n        console.log('Sending data...');\n    },\n    success: function(response) {\n        console.log('Success:', response);\n    },\n    error: function(xhr, status, error) {\n        console.error('Error:', error);\n    },\n    complete: function(xhr, status) {\n        console.log('Request complete');\n    }\n});\n</code></pre>"},{"location":"jQuery/jQueryBasics/","title":"What is jQuery","text":"<p>jQuery is a Javascript library which makes things like event handling, animation, and ajax much simpler by implementing an API that works across many browsers.</p> <p>Essentially, you select an HTML element, then perform an action on that element.</p>"},{"location":"jQuery/jQueryBasics/#jquery-syntax","title":"jQuery Syntax","text":"<p>Basic syntax is: </p> <pre><code>$(selector).action()\n</code></pre> <ul> <li>A $ sign to define/access jQuery</li> <li>A (selector) to \"query (or find)\" HTML elements</li> <li>A jQuery action() to be performed on the element(s)</li> </ul>"},{"location":"jQuery/jQueryDOM/","title":"jQuery Interactions With DOM","text":"<p>jQuery provides an easy way to interact with the Document Object Model  (DOM).</p>"},{"location":"jQuery/jQueryDOM/#methods-for-dom-manipulation","title":"Methods for DOM Manipulation","text":"<p>Selecting Elements</p> <p>jQuery simplifies the selection of DOM elements using CSS-style selectors. Examples include:</p> <ul> <li><code>$('div')</code>: Selects all <code>&lt;div&gt;</code> elements.</li> <li><code>$('.class-name')</code>: Selects all elements with the class class-name.</li> <li><code>$('#id')</code>: Selects the element with the specified ID.</li> </ul> <p>Modifying Content</p> <p>You can use several methods to modify selected content with jQuery:</p> <ul> <li><code>.text()</code>: Get or set the text content of selected elements.</li> <li><code>.html()</code>: Get or set the HTML content.</li> <li><code>.val()</code>: Get or set the values of form elements.</li> </ul> <pre><code>$('#my-div').text('Updated Text'); // Updates text content of the element with ID 'my-div'.\n</code></pre> <p>Adding and Removing Elements</p> <p>You can add new elements to the DOM or remove existing ones:</p> <ul> <li><code>.append()</code>: Inserts content at the end of selected elements.</li> <li><code>.prepend()</code>: Inserts content at the beginning.</li> <li><code>.remove()</code>: Removes the selected elements from the DOM.</li> <li><code>.empty()</code>: Removes all the child elements and content from the selected elements.</li> </ul> <p>Manipulating Attributes and Properties</p> <p>You can get or set attributes and properties of elements:</p> <ul> <li><code>.attr()</code>: Get or set an attribute value.</li> <li><code>.removeAttr()</code>: Remove an attribute.</li> <li><code>.prop()</code>: Get or set properties such as checked, disabled, etc.</li> </ul> <pre><code>$('#my-link').attr('href', 'https://www.example.com');\n</code></pre> <p>CSS Manipulation</p> <p>You can change the style of elements using jQuery\u2019s CSS methods:</p> <ul> <li><code>.css()</code>: Get or set style properties.</li> <li><code>.addClass()</code>, <code>.removeClass()</code>, <code>.toggleClass()</code>: Manipulate CSS classes.</li> </ul> <pre><code>$('#my-div').css('color', 'blue'); // Changes the text color of '#my-div' to blue.\n</code></pre> <p>Cloning Elements</p> <p>Copy elements with <code>.clone()</code>, which duplicates the selected elements including all their events and data:</p> <pre><code>var clonedElement = $('#my-div').clone();\n$('#container').append(clonedElement);\n</code></pre> <p>Advanced Manipulation</p> <p>jQuery supports more complex operations like:</p> <ul> <li><code>.wrap()</code>, <code>.unwrap()</code>: Wrap elements with additional HTML structure or remove that structure.</li> <li><code>.replaceWith()</code>: Replace elements with new content.</li> </ul>"},{"location":"jQuery/jQueryMobile/","title":"jQuery Mobile","text":"<p>jQuery Mobile is a touch-optimized JavaScript library designed to simplify the development of mobile-friendly websites and applications. It provides a unified user interface system across all popular mobile device platforms, including smartphones and tablets.</p>"},{"location":"jQuery/jQueryMobile/#key-features-of-jquery-mobile","title":"Key Features of jQuery Mobile","text":"<p>Unified User Interface</p> <p>jQuery Mobile has HTML5-based user interface components that are responsive and work across a broad range of devices and screen sizes.</p> <p>Automatic Initialization</p> <p>jQuery Mobile auto-initializes all necessary components without additional scripting.</p> <p>Ajax Navigation System</p> <p>The framework uses an Ajax-powered navigation system to enable animated page transitions, efficient prefetching, and optimized memory management. This system allows for smoother transitions and a more app-like experience within the browser.</p> <p>Touch-optimized Widgets</p> <p>jQuery Mobile includes a variety of widgets like toolbars, list views, buttons, forms, popups, panels, and more, which are all optimized for touch interfaces.</p> <p>Theme Framework</p> <p>A theming framework allows developers to customize the appearance through a central theme. This theme can be extended with additional themes for specific devices or operating systems.</p> <p>Accessibility</p> <p>jQuery Mobile ensures that applications are accessible to people with disabilities, complying with WCAG and ARIA standards.</p>"},{"location":"jQuery/jQueryMobile/#core-components","title":"Core Components","text":"<p>Page Structure</p> <p>jQuery Mobile uses a simple HTML5-based structure where each \"page\" is a container (<code>&lt;div&gt;</code> element) with a data-role of \"page\". Pages are linked using regular anchor tags and are enhanced automatically by the framework.</p> <pre><code>&lt;div data-role=\"page\" id=\"home\"&gt;\n    &lt;div data-role=\"header\"&gt;\n        &lt;h1&gt;Home Page&lt;/h1&gt;\n    &lt;/div&gt;\n    &lt;div data-role=\"content\"&gt;\n        &lt;p&gt;Welcome to our mobile site!&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div data-role=\"footer\"&gt;\n        &lt;h4&gt;Footer content&lt;/h4&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Navigation</p> <p>Navigation between pages is managed using links that reference the IDs of the container divs. The framework handles these links with Ajax, providing animated transitions by default.</p> <p>Form Elements</p> <p>Form elements in jQuery Mobile are automatically enhanced to provide a consistent look and feel. Checkboxes, radio buttons, sliders, switches, and select menus are all styled to be touch-friendly and visually integrated.</p> <p>Responsive Layout</p> <p>The grid system in jQuery Mobile helps in creating responsive layouts that adjust to various screen sizes, ensuring that the application looks good on both phones and tablets.</p>"},{"location":"jQuery/jQueryUI/","title":"jQuery UI Effects and Animations","text":"<p>jQuery UI extends the core jQuery library, providing advanced effects, animations, and interactions to create rich and interactive web interfaces.</p> <p>Setting Up jQuery UI Before you can use jQuery UI, ensure that both jQuery and jQuery UI:</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css\"&gt;\n&lt;script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://code.jquery.com/ui/1.12.1/jquery-ui.min.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Core Effects jQuery UI provides several built-in effects:</p> <p>Basic Effects</p> <ul> <li>Show/Hide/Toggle: Extend the basic functionality with animated transitions.</li> </ul> <pre><code>$('#my-div').toggle('blind', 500); // Toggles visibility using a 'blind' effect over 500 milliseconds.\n</code></pre> <p>Fading Effects </p> <ul> <li>Fade In/Fade Out: Smooth transitions to and from transparency.</li> </ul> <pre><code>$('#my-div').fadeIn(300); // Fades the element into view over 300 milliseconds.\n</code></pre> <p>Sliding Effects</p> <ul> <li>Slide Up/Slide Down: Collapse or reveal content vertically.</li> </ul> <pre><code>$('#my-div').slideUp('slow'); // Slides up the content slowly.\n</code></pre>"},{"location":"jQuery/jQueryUI/#advanced-effects-and-animations","title":"Advanced Effects and Animations","text":"<p>jQuery UI enables more complex interactions and animations:</p> <p>Animate Class</p> <ul> <li>Add Class/Remove Class/Switch Class: Animate changes in classes.</li> </ul> <pre><code>$('#my-div').addClass('highlight', 1000); // Adds a class with an animation over 1000 milliseconds.\n</code></pre> <p>Color Animation</p> <ul> <li>Color Changes: Animate changes in color properties.</li> </ul> <pre><code>$('#my-div').animate({ backgroundColor: '#aa0000' }, 1000);\n</code></pre> <p>Easing</p> <ul> <li>Easing Functions: Control the speed of an animation\u2019s progress.</li> </ul> <pre><code>$('#my-div').hide('slide', { direction: 'left' }, 'easeOutBounce');\n</code></pre> <p>Interactions</p> <p>jQuery UI can be used to create draggable, droppable, resizable, and selectable UI components.</p> <pre><code>$( \"#my-draggable\" ).draggable();\n</code></pre>"}]}