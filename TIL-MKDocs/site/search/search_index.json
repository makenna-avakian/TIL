{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TIL","text":"<p>Today I Learned</p> <p>A collection of small write ups on interesting topics. Inspired by @jbranchaud.</p>"},{"location":"mardown/","title":"Markdown in this Repo","text":"<p>Markdown open preview to see in real time </p> <p>mkdocks look at squid funk to make this into a cool static website. host on .io</p> <p>https://www.mkdocs.org/getting-started/</p>"},{"location":"Accessibility/accessibility-basics/","title":"Writing Accessible Code","text":"<p>Make your HTML code as semantic as possible.</p>"},{"location":"Accessibility/accessibility-basics/#use-semantic-html","title":"Use Semantic HTML","text":"<p>Purpose: Semantic HTML elements clearly describe their meaning in a human- and machine-readable way.</p> <p>Examples: Use <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;nav&gt;</code>, and <code>&lt;aside&gt;</code> to structure the content. Use <code>&lt;h1&gt;</code>to <code>&lt;h6&gt;</code> for headings to structure content logically.</p>"},{"location":"Accessibility/accessibility-basics/#alt-text-for-images","title":"Alt Text for Images","text":"<p>Purpose: Provides a textual alternative to non-text content in web pages.</p> <p>Example: <code>&lt;img src=\"logo.png\" alt=\"Company Logo\"&gt;</code> \u2014 The alt attribute explains the image content.</p>"},{"location":"Accessibility/accessibility-basics/#aria-accessible-rich-internet-applications-roles","title":"ARIA (Accessible Rich Internet Applications) Roles","text":"<p>Purpose: ARIA roles and attributes provide additional information about the role, state, and functionality of elements.</p> <p>Example: <code>aria-label</code>, <code>aria-hidden</code>, <code>aria-live</code> are commonly used.</p>"},{"location":"Accessibility/accessibility-basics/#keyboard-accessibility","title":"Keyboard Accessibility","text":"<p>Purpose: All functionalities should be accessible via a keyboard.</p> <p>Example: All interactive elements like links, buttons, and form controls are focusable using the tabindex attribute if necessary.</p>"},{"location":"Accessibility/accessibility-basics/#accessible-forms","title":"Accessible Forms","text":"<p>Purpose: Ensure forms are usable and understandable.</p> <p>Example: Use <code>&lt;label&gt;</code> for every input element. For example, <code>&lt;label for=\"name\"&gt;Name:&lt;/label&gt;&lt;input type=\"text\" id=\"name\"&gt;</code>. Group related form elements within <code>&lt;fieldset&gt;</code> elements and describe the group with <code>&lt;legend&gt;</code>.</p>"},{"location":"Accessibility/accessibility-basics/#use-of-correct-headings-and-labels","title":"Use of Correct Headings and Labels","text":"<p>Purpose: Headings and labels help in structuring content and describing functionality.</p> <p>Example: Use headings consistently to structure content; labels should clearly describe the purpose of the associated input field.</p>"},{"location":"Accessibility/accessibility-basics/#manage-focus-for-interactive-elements","title":"Manage Focus for Interactive Elements","text":"<p>Purpose: Focus management is crucial for users who rely on keyboards and assistive technologies. Can programatically set through <code>element.focus()</code>.</p> <p>Example: When a modal opens, move focus to the modal, and trap focus within until it\u2019s closed.</p>"},{"location":"Accessibility/accessibility-basics/#sufficient-color-contrast","title":"Sufficient Color Contrast","text":"<p>Purpose: Text should be readable against its background for those with visual impairments. Note that some color combinations techincally pass color contrast checkers but are deemed harder to read in actuality.</p> <p>Example: Use tools like the WebAIM Color Contrast Checker to ensure that text-background color combinations have enough contrast.</p>"},{"location":"Accessibility/accessibility-basics/#responsive-and-mobile-accessibility","title":"Responsive and Mobile Accessibility","text":"<p>Purpose: Content must be usable on all devices and screen sizes.</p> <p>Example: Use responsive web design practices, such as flexible grid layouts and media queries.</p>"},{"location":"Accessibility/general/","title":"Accessibility","text":"<p>Accessible front-end design refers to the practice of creating web interfaces that can be easily navigated and used by people of all abilities, including those with disabilities. This involves ensuring that web applications support assistive technologies such as screen readers, adhere to consistent navigation patterns, offer keyboard navigability, and meet established accessibility standards like the WCAG (Web Content Accessibility Guidelines). This approach not only improves usability for all users but also ensures compliance with legal requirements.</p>"},{"location":"Accessibility/general/#table-of-contents","title":"Table of Contents:","text":"<ul> <li>Accessibility Basics</li> <li>Screenreaders</li> </ul>"},{"location":"Accessibility/screenreader/","title":"Coding for Screenreaders","text":""},{"location":"Accessibility/screenreader/#screen-reader-announcements","title":"Screen Reader Announcements","text":"<p>Changes in the state of UI components (like opening or closing of submenus) hould be announced properly:</p> <p><code>aria-live</code> Regions: Introduce sections of the page that are marked with <code>aria-live=\"polite\"</code> or <code>aria-live=\"assertive\"</code> for dynamic content changes, so that screen readers can announce these changes when they occur without disrupting the user's current activity.</p>"},{"location":"Accessibility/screenreader/#labeling-and-instructions","title":"Labeling and Instructions","text":"<p>Descriptive Labels:  All elements, especially interactive ones like buttons, should have clear and descriptive labels using <code>aria-label</code>.</p> <p>Instructions for  Navigation: Provide instructions at the beginning of the navigation section on how to interact with the menu, especially for complex interfaces.</p>"},{"location":"Accessibility/screenreader/#text-alternatives-for-visual-information","title":"Text Alternatives for Visual Information","text":"<p>Visual Cues as Text: If visual cues like colors or styles are used to indicate active or disabled states, these should be conveyed through text or screen reader-specific hints.</p>"},{"location":"Accessibility/screenreader/#logical-tab-order","title":"Logical Tab Order","text":"<p>Consistent Navigation: Users should be able to navigate through items in a predictable and consistent order, matching the visual structure of the component.</p>"},{"location":"Accessibility/screenreader/#skip-navigation-link","title":"Skip Navigation Link","text":"<p>Skip to Main Content: Provide a \"Skip to main content\" link at the top of the page that becomes visible when focused (done via keyboard navigation).</p>"},{"location":"CSS/general/","title":"CSS","text":"<p>CSS is a stylesheet language used to describe the presentation of a document written in HTML or XML. CSS defines how elements should be rendered on screen, on paper, or in other media. It saves a lot of work by controlling the layout of multiple web pages all at once.</p>"},{"location":"CSS/general/#table-of-contents","title":"Table of Contents:","text":""},{"location":"Git/ack/","title":"ack","text":"<p>Used for working on microservices or multiple repos. Looks up all files under the current directory. Can use regex with it.</p> <p>ack searchword: shows all of files that has matching word across repos. - ack --ts searchword: only search for .ts files (can seach for different file names) - ack --help: list of all helpful search patterns</p>"},{"location":"Git/alias/","title":"Git Alias","text":"<p>Used to make shortcuts for git commands.</p>"},{"location":"Git/alias/#getting-set-up","title":"Getting set up","text":"<p>Open your terminal and navigate to your root directory. (cd /) To create the shorthand file, run: <code>touch ~/.gitshorthand</code></p>"},{"location":"Git/alias/#editing-your-file","title":"Editing your file","text":"<p>You can edit your file in your terminal with: <code>nano ~/.gitshorthand</code></p> <p>(After making your changes in Nano, press Ctrl + O. This will prompt you to confirm the file name to save. Press Enter to confirm the file name, then, press Ctrl + X to exit Nano.)</p>"},{"location":"Git/alias/#adding-to-zshrc","title":"Adding to .zshrc","text":"<p>Open your ~/.zshrc file in a text editor. <code>nano ~/.zshrc</code></p> <p>At the end of your ~/.zshrc file, add the following line: <code>source ~/.gitshorthand</code></p> <p>Save the ~/.zshrc file and reload the file to apply the changes. You can run: <code>source ~/.zshrc</code></p>"},{"location":"Git/config-editor/","title":"Setting a specific text editor for VS Code","text":"<p>git config --global core.editor \"code --wait\"</p>"},{"location":"Git/conflicts/","title":"Conflicts","text":""},{"location":"Git/conflicts/#identify-conflicts","title":"Identify Conflicts","text":"<p>When you encounter a conflict, Git will notify you. Use the git status command to see which files have conflicts. Conflicting files will be marked as \"both modified\" in the status output.</p>"},{"location":"Git/conflicts/#open-conflicting-files","title":"Open Conflicting Files","text":"<p>Open the conflicting file(s) in your code editor. Git marks the conflicting sections within the file.</p>"},{"location":"Git/conflicts/#understand-conflict-markers","title":"Understand Conflict Markers","text":"<p>Git marks conflicts with special markers: &lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, and &gt;&gt;&gt;&gt;&gt;&gt;&gt;. Everything between &lt;&lt;&lt;&lt;&lt;&lt;&lt; and ======= represents changes from the current branch. Everything between ======= and &gt;&gt;&gt;&gt;&gt;&gt;&gt; represents changes from the incoming branch.</p>"},{"location":"Git/conflicts/#resolve-conflicts","title":"Resolve Conflicts","text":"<p>Manually edit the conflicting sections to resolve differences. Decide which changes to keep, modify, or discard. Delete the conflict markers (&lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;) once you've resolved the conflict.</p>"},{"location":"Git/conflicts/#add-and-commit-changes","title":"Add and Commit Changes","text":"<p>Use git add  to stage the resolved file(s) for commit. Once all conflicts are resolved, commit the changes using git commit. <p>For some Automatically generated files (like package-lock.json) it's always best to regenerate the file through npm install.</p>"},{"location":"Git/general/","title":"Git","text":"<p>Git is a distributed version control system designed to handle everything from small to very large projects with speed and efficiency. It allows multiple developers to work on the same project simultaneously, managing changes from various sources effectively. Git is essential for tracking revisions in software development, enabling developers to revert to previous states and collaborate on code without conflict.</p>"},{"location":"Git/general/#table-of-contents","title":"Table of Contents:","text":"<ul> <li>ack</li> <li>alias</li> <li>config editor</li> <li>conflicts</li> <li>useful-commands</li> </ul>"},{"location":"Git/useful-commands/","title":"Useful Git Commands:","text":"<p><code>git history</code>: To view a list of commands executed in the current Git session, you can use history. This command provides a chronological record of the commands you've run, helping you track your workflow.</p> <p><code>git log</code>: If you want to see a list of previous commits along with their commit messages, authors, and timestamps, use git log. This command provides a comprehensive overview of the commit history of your repository, aiding in understanding the evolution of the project.</p> <p><code>git status</code>: To check the status of your working directory and staging area, use git status. It allows you to see which files have been modified, staged for commit, or are untracked, helping you manage your changes effectively.</p>"},{"location":"Git/useful-commands/#git-commits","title":"Git Commits:","text":"<p><code>git add</code>: Use git add to add changes from your working directory to the staging area in preparation for committing.</p> <p><code>git stash</code>: If you want to temporarily shelve changes in your working directory without committing them, you can use git stash.</p> <p><code>git stash pop</code>: To retrieve the most recently stashed changes from the stash and apply them to your working directory, use git stash pop.</p> <p><code>git stash save example-name</code>: You can save the current state of your working directory, including staged changes, with a custom label using git stash save.</p> <p><code>git reset</code>: To undo changes in your working directory or staging area, you can use git reset. Be cautious as it modifies the repository's history.</p> <p><code>git commit -v -m \"commit message\"</code>: This command allows you to commit changes with a verbose diff displayed, aiding in reviewing the changes being committed.</p>"},{"location":"Git/useful-commands/#git-commit-messages","title":"Git Commit Messages:","text":"<p>Various commands can be used within the Git commit message editor: - :q to quit. - :w to write (save changes). - :qw to write and quit. - :q! to force quit without saving changes.</p> <p><code>git reset --soft HEAD~1</code>: Use this command to revert the last commit while preserving the changes in your working directory and staging area. It's less drastic than git reset with a commit hash, as it maintains the commit history.</p> <p><code>git commit --amend</code>: If you need to modify the last commit's message or include additional changes, you can use git commit --amend. This command combines staging changes and committing with the previous commit, effectively updating it.</p> <p><code>git diff</code>: To see the difference between the current state of your working directory and the staging area, use git diff. This command opens a Vim-like interface to display the changes.</p> <p><code>git add -p</code>: Use git add -p to selectively stage changes by interactively choosing which lines or chunks of code to add to the staging area.</p> <p><code>git reflog</code>: For a detailed history of reference updates in your repository, including commits, branches, merges, and resets, use git reflog. It provides a comprehensive log of all recent actions with corresponding hashes, aiding in navigating and recovering from mistakes.</p>"},{"location":"HTML/general/","title":"HTML","text":"<p>HTML is the standard markup language for creating web pages and web applications. With HTML, users can create and structure sections, paragraphs, headings, links, and blockquotes for web pages and applications. HTML is the backbone of any web development process, without which a web page doesn't exist.</p> <p>This folder will cover information about HTML.</p>"},{"location":"HTML/general/#table-of-contents","title":"Table of Contents:","text":""},{"location":"React/custom-components/","title":"React Custom Components","text":"<p>What everyone uses React for! In React you can create functions to generate custom components to build out your architecture. While React provides a variety of built-in components, you will often need to create your own custom components to provide specific functionality and reusability.</p>"},{"location":"React/custom-components/#creating-custom-components","title":"Creating custom components","text":""},{"location":"React/custom-components/#functional-components","title":"Functional Components","text":"<p>Functional components are simple JavaScript functions that return JSX to define the UI. They are stateless by default.</p> <pre><code>import React from 'react';\n\nconst MyComponent = (props) =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{props.title}&lt;/h1&gt;\n      &lt;p&gt;{props.description}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default MyComponent;\n</code></pre>"},{"location":"React/custom-components/#class-components","title":"Class Components","text":"<p>Class components are classes that extend from React.Component. They have additional features such as state management and lifecycle methods, making them suitable for more complex components.</p> <pre><code>import React, { Component } from 'react';\n\nclass MyComponent extends Component {\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;{this.props.title}&lt;/h1&gt;\n        &lt;p&gt;{this.props.description}&lt;/p&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nexport default MyComponent;\n</code></pre>"},{"location":"React/custom-components/#properties-props","title":"Properties (Props)","text":"<p>Props (short for properties) are used to pass data from parent components to child components. They are immutable and are passed down through the component tree.</p> <pre><code>// ParentComponent.js\nimport React from 'react';\nimport MyComponent from './MyComponent';\n\nconst ParentComponent = () =&gt; {\n  return &lt;MyComponent title=\"Hello\" description=\"This is a custom component\" /&gt;;\n};\n\nexport default ParentComponent;\n</code></pre>"},{"location":"React/custom-components/#state","title":"State","text":"<p>State is used to manage component-specific data that may change over time. Class components have a built-in state feature, while functional components can use the useState hook.</p> <pre><code>// MyComponent.js\nimport React, { useState } from 'react';\n\nconst MyComponent = () =&gt; {\n  const [count, setCount] = useState(0);\n\n  const incrementCount = () =&gt; {\n    setCount(count + 1);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={incrementCount}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default MyComponent;\n</code></pre>"},{"location":"React/general/","title":"React","text":"<p>React is an Open Source view library created and maintained by Facebook. It's a great tool to render the User Interface (UI) of modern web applications.</p> <p>React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript. This has several benefits. It lets you use the full programmatic power of JavaScript within HTML, and helps to keep your code readable. </p>"},{"location":"React/general/#table-of-contents","title":"Table of Contents:","text":"<ul> <li>Lifting States</li> <li>Use Effect</li> <li>Use State</li> <li>Custom Components</li> <li>Prevent Default</li> <li>React APIs</li> <li>React Refs</li> <li>Validation with Types</li> </ul>"},{"location":"React/preventdefault/","title":"preventDefault()","text":"<p>preventDefault() is React's way of providing a way to prevent the behavior of certain events, such as form submissions or link clicks.</p> <p><code>preventDefault()</code> is a method available on event objects in JavaScript. It is used to stop the default action of an event from occurring. For example, when a form is submitted, the browser typically reloads the page. By calling <code>preventDefault()</code> on the submit event, you can prevent this default behavior.</p>"},{"location":"React/preventdefault/#places-to-use-preventdefault","title":"Places to use preventDefault():","text":""},{"location":"React/preventdefault/#form-submissions","title":"Form Submissions:","text":"<p>When handling form submissions in React, you can prevent the default form submission behavior to perform custom validation or asynchronous operations, or prevent a page from rerendering.</p>"},{"location":"React/preventdefault/#link-clicks","title":"Link Clicks:","text":"<p>When handling clicks on anchor elements, you can to prevent the default navigation behavior to implement client-side routing.</p>"},{"location":"React/preventdefault/#keyboard-events","title":"Keyboard Events:","text":"<p>In certain cases, you cano prevent default keyboard shortcuts or actions from occurring when handling keyboard events.</p>"},{"location":"React/preventdefault/#preventdefault-example","title":"preventDefault() Example","text":"<p>Preventing a form submission:</p> <pre><code>import React from 'react';\n\nclass MyForm extends React.Component {\n  handleSubmit(event) {\n    event.preventDefault(); // Prevents the default form submission behavior\n    // Perform custom form handling logic here\n  }\n\n  render() {\n    return (\n      &lt;form onSubmit={this.handleSubmit}&gt;\n        &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n      &lt;/form&gt;\n    );\n  }\n}\n\n</code></pre>"},{"location":"React/react-API/","title":"Basic React APIs","text":""},{"location":"React/react-API/#introduction","title":"Introduction","text":"<p>React APIs are a way for a React application to interact with external services. They allow the application to send and receive data, enabling it to be dynamic and responsive.</p>"},{"location":"React/react-API/#types-of-apis","title":"Types of APIs","text":""},{"location":"React/react-API/#reactdom","title":"ReactDOM","text":"<p>This API provides methods for rendering React components into the DOM (Document Object Model). The <code>ReactDOM.render()</code> method is commonly used to mount a React component into a specific DOM node.</p>"},{"location":"React/react-API/#components","title":"Components","text":"<p>Components are the building blocks of React applications. They can be either functional components or class components. Functional components are simple JavaScript functions that return JSX (JavaScript XML), while class components are JavaScript classes that extend <code>React.Component</code> and implement a <code>render()</code> method.</p>"},{"location":"React/react-API/#props","title":"Props","text":"<p>Props (short for properties) are inputs to React components. They allow data to be passed from parent components to child components. Props are read-only and should not be modified by the component itself.</p>"},{"location":"React/react-API/#state","title":"State","text":"<p>State represents the internal data of a component. Unlike props, which are passed down from parent components, state is managed within the component itself. Changes to state trigger re-rendering of the component, updating the UI as necessary. State can be initialized in the constructor of a class component or using the <code>useState</code> hook in functional components.</p>"},{"location":"React/react-API/#hooks","title":"Hooks","text":"<p>Hooks are functions that enable functional components to use state and other React features without writing a class. Commonly used hooks include <code>useState</code>, <code>useEffect</code>, <code>useContext</code>, and <code>useReducer</code>.</p>"},{"location":"React/react-refs/","title":"React refs","text":"<p>Refs are unique to React. React provides refs as a way to acess DOM/React elements created in the render method.</p>"},{"location":"React/react-refs/#when-to-use-refs","title":"When to Use Refs","text":"<p>Refs should not be used often since manipulating DOM directly can lead to issues with React's rendering cycle. However, there are certain scenarios where refs are useful:</p>"},{"location":"React/react-refs/#accessing-dom-elements","title":"Accessing DOM Elements:","text":"<p>When you need to interact with a DOM element directly, such as focusing an input field or measuring its dimensions.</p>"},{"location":"React/react-refs/#managing-focus-text-selection-or-media-playback","title":"Managing Focus, Text Selection, or Media Playback:","text":"<p>Refs can be used to manage focus, select text, or control media playback.</p>"},{"location":"React/react-refs/#integrating-with-third-party-dom-libraries","title":"Integrating with Third-party DOM Libraries:","text":"<p>When integrating React with third-party DOM libraries that require direct access to DOM elements.</p>"},{"location":"React/react-refs/#creating-refs","title":"Creating Refs","text":"<p>Refs in React are created using the React.createRef() method. You can create a ref and attach it to a React element by using the ref attribute.</p> <pre><code>import React from 'react';\n\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n\n  render() {\n    return &lt;div ref={this.myRef}&gt;Example&lt;/div&gt;;\n  }\n}\n</code></pre>"},{"location":"React/validation-with-types/","title":"Validating with PropType and Typescript","text":""},{"location":"React/validation-with-types/#define-proptypes-for-components","title":"Define PropTypes for Components","text":"<p>In your TypeScript React components, you can define PropTypes using the PropTypes object provided by the prop-types library:</p> <pre><code>import React from 'react';\nimport PropTypes from 'prop-types';\n\ninterface MyComponentProps {\n  title: string;\n  description: string;\n}\n\nconst MyComponent: React.FC&lt;MyComponentProps&gt; = ({ title, description }) =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{title}&lt;/h1&gt;\n      &lt;p&gt;{description}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nMyComponent.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired\n};\n\nexport default MyComponent;\n</code></pre> <p>This defines a MyComponentProps interface to specify the expected props for MyComponent. Then it uses PropTypes to define the PropTypes for each prop.</p>"},{"location":"React/validation-with-types/#proptype-features","title":"PropType Features:","text":""},{"location":"React/validation-with-types/#runtime-validation","title":"Runtime Validation:","text":"<p>PropTypes provides runtime validation of props. It checks the types of props during runtime and issues warnings in development if the props don't match the specified types. This helps catch errors early during development.</p>"},{"location":"React/validation-with-types/#documentation","title":"Documentation:","text":"<p>PropTypes serve as a form of documentation for components. By specifying PropTypes, developers can understand what props are expected by a component and their types.</p>"},{"location":"React/validation-with-types/#optional","title":"Optional:","text":"<p>PropTypes are optional. You can choose to use them or not, depending on your preference or project requirements. PropTypes are actually removed during the compling to make it more performant.</p>"},{"location":"React/validation-with-types/#typescript-types","title":"TypeScript Types:","text":""},{"location":"React/validation-with-types/#compile-time-type-checking","title":"Compile-time Type Checking:","text":"<p>TypeScript types provide static type-checking at compile time. This means that type errors are caught during development before the code is executed. This can lead to more robust code and fewer runtime errors.</p>"},{"location":"React/validation-with-types/#strict-typing","title":"Strict Typing:","text":"<p>TypeScript offers strict typing, which means that types are enforced more rigorously compared to PropTypes. TypeScript can infer types from the code or explicitly define types using annotations.</p>"},{"location":"React/validation-with-types/#tooling-support","title":"Tooling Support:","text":"<p>TypeScript provides better tooling support, such as code completion, refactoring, and type inference in modern code editors. This can improve developer productivity and reduce errors.</p>"},{"location":"React/validation-with-types/#interfaces-and-unions","title":"Interfaces and Unions:","text":"<p>TypeScript allows defining interfaces, types, and unions of types, providing more expressive and precise type definitions. This can lead to more maintainable and understandable code.</p>"},{"location":"React/validation-with-types/#native-support","title":"Native Support:","text":"<p>TypeScript is natively supported by the language, while PropTypes is a separate library that needs to be installed and imported into the project.</p>"},{"location":"React/Hooks/lifting-state/","title":"Lifting React States","text":""},{"location":"React/Hooks/lifting-state/#introduction","title":"Introduction","text":"<p>In React, lifting a state up means lifting a shared state up to the closest common ancestor so that multiple components can access and modify the same state.</p>"},{"location":"React/Hooks/lifting-state/#example","title":"Example:","text":"<p>The App.js file will be responsible for managing the shared username state and passing it down to both the UsernameInput and DisplayUsername components.</p> <pre><code>app.jsx:\n\nimport React, { useState } from 'react';\nimport UsernameInput from './UsernameInput';\nimport DisplayUsername from './DisplayUsername';\n\nfunction App() {\n  const [username, setUsername] = useState('');\n\n  // Function to update username\n  const handleUsernameChange = (newUsername) =&gt; {\n    setUsername(newUsername);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;User Profile&lt;/h1&gt;\n      &lt;UsernameInput username={username} onUsernameChange={handleUsernameChange} /&gt;\n      &lt;DisplayUsername username={username} /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n\n</code></pre> <p>The UsernameInput.js file provides an input field for users to type their username. It receives the current username and a function to update it from its parent.</p> <pre><code>import React from 'react';\n\nfunction UsernameInput({ username, onUsernameChange }) {\n  return (\n    &lt;div&gt;\n      &lt;label htmlFor=\"username\"&gt;Username: &lt;/label&gt;\n      &lt;input\n        id=\"username\"\n        type=\"text\"\n        value={username}\n        onChange={(e) =&gt; onUsernameChange(e.target.value)}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default UsernameInput;\n</code></pre> <p>The DisplayUsername.js component simply displays the current username. It receives the username as a prop from its parent component.</p> <pre><code>import React from 'react';\n\nfunction DisplayUsername({ username }) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Current Username: {username}&lt;/h2&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default DisplayUsername;\n</code></pre> <p>App.tsx acts as the common ancestor for usernameinput.js and displayusername.js. The state being passed is <code>username</code>, which gets passed to both child components, and is the \"lifted up\" state.</p>"},{"location":"React/Hooks/useEffect/","title":"useEffect","text":"<p>In React's functional components, managing side effects\u2014operations that affect something outside the scope of the function being executed\u2014is crucial for handling data fetching, subscriptions, manually changing the DOM, etc. The useEffect hook performs side effects in functional components.</p>"},{"location":"React/Hooks/useEffect/#syntax","title":"Syntax","text":"<pre><code>useEffect(() =&gt; {\n  // logic here\n}, [dependencies]);\n</code></pre> <p>The first argument is a function that will run after every render by default.</p> <p>The second argument is an optional array of dependencies that triggers the effect only when any of them changes.</p>"},{"location":"React/Hooks/useEffect/#dependancy-arrays","title":"Dependancy Arrays","text":"<p>The dependency array is a feature of useEffect that controls when the effect function runs. Here are the types:</p> <ul> <li>No dependency ([]): The effect runs only once after the initial render, similar to componentDidMount.</li> <li>With dependencies ([deps]): The effect runs whenever any value in the dependencies array changes, in addition to after the initial render.</li> <li>No array provided: The effect runs after every render.</li> </ul>"},{"location":"React/Hooks/useEffect/#cleanup-functions","title":"Cleanup functions","text":"<p><code>useEffect</code> allows you to return a function from the effect to prevent memory leaks:</p> <pre><code>useEffect(() =&gt; {\n  // Setup logic\n  return () =&gt; {\n    // Cleanup logic\n  };\n}, [dependencies]);\n</code></pre>"},{"location":"React/Hooks/useEffect/#common-uses","title":"Common uses","text":"<ul> <li>Fetching Data: Perform API calls and update the component state with the fetched data.</li> <li>Listening to Events: Attach and detach event listeners for user actions or global events.</li> <li>Manually Manipulating the DOM: Directly manipulate the DOM when necessary, though React encourages avoiding direct DOM manipulations. </li> </ul>"},{"location":"React/Hooks/useState/","title":"useState","text":"<p><code>useState</code> in React is how you manage states. States refer to data or properties that need to be tracked in an application. These data points can change over time and affect the behavior and appearance of a component.</p>"},{"location":"React/Hooks/useState/#usestate_1","title":"<code>useState</code>","text":"<p>Initializing <code>useState</code> returns an array containing two elements: the current state value and a function that allows you to update it. This mechanism provides a way to declare state variables in functional components.</p>"},{"location":"React/Hooks/useState/#syntax","title":"Syntax","text":"<pre><code>const [state, setState] = useState(initialState);\n</code></pre> <p><code>initialState</code>: The initial value of the state variable. This argument is only used during the first render.</p> <p><code>state</code>: The current state value.</p> <p><code>setState</code>: A function that updates the state value.</p>"},{"location":"React/Hooks/useState/#example","title":"Example","text":"<p>Here is a simple example demonstrating how to use useState to manage a counter within a functional component:</p> <pre><code>\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  // Declare a new state variable called \"count\"\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Click me\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Here, <code>useState</code> sets a <code>count</code> initialized to 0. You would then call <code>setCount</code> to update <code>count</code> when the button is clicked.</p> <p>*** Treat state as immutable. Always use the setter function to update state variables instead of modifying them directly.</p>"},{"location":"Tailwind/general/","title":"Tailwind","text":"<p>Tailwind is a utility-first CSS framework that provides a vast array of predefined classes that can be used to build custom designs directly in your HTML. Unlike traditional CSS frameworks that offer predefined components, Tailwind enables developers to rapidly style their applications without leaving the HTML, promoting higher customizability and productivity through its design-first approach.</p> <p>This folder will cover information on tailwind.</p>"},{"location":"Tailwind/general/#table-of-contents","title":"Table of Contents:","text":""}]}